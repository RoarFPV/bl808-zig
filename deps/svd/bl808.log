debug(database): 0: adding name: BL808
debug(database): 0: adding description: Bouffalo BL808 chip
debug(database): 0: adding device attr: license=
Copyright (c) 2022 Bouffalo Lab
bl808-pac is licensed under Mulan PSL v2.
You can use this software according to the terms and conditions of the Mulan PSL v2.
You may obtain a copy of Mulan PSL v2 at:
         http://license.coscl.org.cn/MulanPSL2
THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
See the Mulan PSL v2 for more details.
  
debug(database): 1: creating peripheral
debug(database): 1: adding name: CODEC
debug(database): 1: adding description: Codec miscellaneous control
debug(database): 2: creating peripheral instance
debug(database): 2: adding name: CODEC
debug(database): 2: adding offset: 0x30020000
debug(database): 2: (instance.peripheral) is child of: 0
debug(database): 2: adding description: Codec miscellaneous control
debug(database): 3: creating register
debug(database): 3: adding name: todo
debug(database): 3: adding description: ??
debug(database): 3: adding offset: 0x0
debug(database): 3: adding size: 32
debug(database): 3: adding access: Database.Access.read_write
debug(database): 3: adding register mask: 0xffffffff
debug(database): 3: adding reset value: 0
debug(database): 3: (type.register) is child of: 1
debug(database): 4: creating peripheral
debug(database): 4: adding name: MJPEG
debug(database): 4: adding description: Motion JPEG encoder
debug(database): 5: creating peripheral instance
debug(database): 5: adding name: MJPEG
debug(database): 5: adding offset: 0x30021000
debug(database): 5: (instance.peripheral) is child of: 0
debug(database): 5: adding description: Motion JPEG encoder
debug(database): 6: creating register
debug(database): 6: adding name: todo
debug(database): 6: adding description: ??
debug(database): 6: adding offset: 0x0
debug(database): 6: adding size: 32
debug(database): 6: adding access: Database.Access.read_write
debug(database): 6: adding register mask: 0xffffffff
debug(database): 6: adding reset value: 0
debug(database): 6: (type.register) is child of: 4
debug(database): 7: creating peripheral
debug(database): 7: adding name: H264
debug(database): 7: adding description: H.264 video codec control
debug(database): 8: creating peripheral instance
debug(database): 8: adding name: H264
debug(database): 8: adding offset: 0x30022000
debug(database): 8: (instance.peripheral) is child of: 0
debug(database): 8: adding description: H.264 video codec control
debug(database): 9: creating register
debug(database): 9: adding name: todo
debug(database): 9: adding description: ??
debug(database): 9: adding offset: 0x0
debug(database): 9: adding size: 32
debug(database): 9: adding access: Database.Access.read_write
debug(database): 9: adding register mask: 0xffffffff
debug(database): 9: adding reset value: 0
debug(database): 9: (type.register) is child of: 7
debug(database): 10: creating peripheral
debug(database): 10: adding name: NPU
debug(database): 10: adding description: Bouffalo Convolutional Neural Network
debug(database): 11: creating peripheral instance
debug(database): 11: adding name: NPU
debug(database): 11: adding offset: 0x30024000
debug(database): 11: (instance.peripheral) is child of: 0
debug(database): 11: adding description: Bouffalo Convolutional Neural Network
debug(database): 12: creating register
debug(database): 12: adding name: todo
debug(database): 12: adding description: ??
debug(database): 12: adding offset: 0x0
debug(database): 12: adding size: 32
debug(database): 12: adding access: Database.Access.read_write
debug(database): 12: adding register mask: 0xffffffff
debug(database): 12: adding reset value: 0
debug(database): 12: (type.register) is child of: 10
debug(database): 13: creating peripheral
debug(database): 13: adding name: MMGLB
debug(database): 13: adding description: Multimedia Global controller
debug(database): 14: creating peripheral instance
debug(database): 14: adding name: MMGLB
debug(database): 14: adding offset: 0x30007000
debug(database): 14: (instance.peripheral) is child of: 0
debug(database): 14: adding description: Multimedia Global controller
debug(database): 15: creating register
debug(database): 15: adding name: todo
debug(database): 15: adding description: ??
debug(database): 15: adding offset: 0x0
debug(database): 15: adding size: 32
debug(database): 15: adding access: Database.Access.read_write
debug(database): 15: adding register mask: 0xffffffff
debug(database): 15: adding reset value: 0
debug(database): 15: (type.register) is child of: 13
debug(database): 16: creating peripheral
debug(database): 16: adding name: PTA
debug(database): 16: adding description: Packet Traffic Arbitration
debug(database): 17: creating peripheral instance
debug(database): 17: adding name: PTA
debug(database): 17: adding offset: 0x24920000
debug(database): 17: (instance.peripheral) is child of: 0
debug(database): 17: adding description: Packet Traffic Arbitration
debug(database): 18: creating register
debug(database): 18: adding name: revision
debug(database): 18: adding description: Peripheral silicon revision
debug(database): 18: adding offset: 0x400
debug(database): 18: adding size: 32
debug(database): 18: adding access: Database.Access.read_write
debug(database): 18: adding register mask: 0xffffffff
debug(database): 18: adding reset value: 0
debug(database): 18: (type.register) is child of: 16
debug(database): 19: creating register
debug(database): 19: adding name: config_0
debug(database): 19: adding description: Arbitration configuration register 0
debug(database): 19: adding offset: 0x404
debug(database): 19: adding size: 32
debug(database): 19: adding access: Database.Access.read_write
debug(database): 19: adding register mask: 0xffffffff
debug(database): 19: adding reset value: 0
debug(database): 19: (type.register) is child of: 16
debug(database): 20: creating field
debug(database): 20: adding name: function
debug(database): 20: adding description: Enable packet traffic arbitration
debug(database): 20: adding offset: 0x0
debug(database): 20: adding size: 1
debug(database): 20: (type.field) is child of: 19
debug(database): 21: creating field
debug(database): 21: adding name: wifi
debug(database): 21: adding description: ??
debug(database): 21: adding offset: 0x1
debug(database): 21: adding size: 1
debug(database): 21: (type.field) is child of: 19
debug(database): 22: creating field
debug(database): 22: adding name: priority
debug(database): 22: adding description: ??
debug(database): 22: adding offset: 0x4
debug(database): 22: adding size: 1
debug(database): 22: (type.field) is child of: 19
debug(database): 23: creating register
debug(database): 23: adding name: bluetooth_transmit
debug(database): 23: adding description: ??
debug(database): 23: adding offset: 0x408
debug(database): 23: adding size: 32
debug(database): 23: adding access: Database.Access.read_write
debug(database): 23: adding register mask: 0xffffffff
debug(database): 23: adding reset value: 0
debug(database): 23: (type.register) is child of: 16
debug(database): 24: creating register
debug(database): 24: adding name: bluetooth_receive
debug(database): 24: adding description: ??
debug(database): 24: adding offset: 0x410
debug(database): 24: adding size: 32
debug(database): 24: adding access: Database.Access.read_write
debug(database): 24: adding register mask: 0xffffffff
debug(database): 24: adding reset value: 0
debug(database): 24: (type.register) is child of: 16
debug(database): 25: creating register
debug(database): 25: adding name: wifi_transmit
debug(database): 25: adding description: ??
debug(database): 25: adding offset: 0x418
debug(database): 25: adding size: 32
debug(database): 25: adding access: Database.Access.read_write
debug(database): 25: adding register mask: 0xffffffff
debug(database): 25: adding reset value: 0
debug(database): 25: (type.register) is child of: 16
debug(database): 26: creating register
debug(database): 26: adding name: wifi_receive
debug(database): 26: adding description: ??
debug(database): 26: adding offset: 0x420
debug(database): 26: adding size: 32
debug(database): 26: adding access: Database.Access.read_write
debug(database): 26: adding register mask: 0xffffffff
debug(database): 26: adding reset value: 0
debug(database): 26: (type.register) is child of: 16
debug(database): 27: creating register
debug(database): 27: adding name: config_1
debug(database): 27: adding description: ??
debug(database): 27: adding offset: 0x428
debug(database): 27: adding size: 32
debug(database): 27: adding access: Database.Access.read_write
debug(database): 27: adding register mask: 0xffffffff
debug(database): 27: adding reset value: 0
debug(database): 27: (type.register) is child of: 16
debug(database): 28: creating peripheral
debug(database): 28: adding name: WIFI
debug(database): 28: adding description: Wireless Fidelity control
debug(database): 29: creating peripheral instance
debug(database): 29: adding name: WIFI
debug(database): 29: adding offset: 0x24b00000
debug(database): 29: (instance.peripheral) is child of: 0
debug(database): 29: adding description: Wireless Fidelity control
debug(database): 30: creating register
debug(database): 30: adding name: coex_control_0
debug(database): 30: adding description: ??
debug(database): 30: adding offset: 0x400
debug(database): 30: adding size: 32
debug(database): 30: adding access: Database.Access.read_write
debug(database): 30: adding register mask: 0xffffffff
debug(database): 30: adding reset value: 0
debug(database): 30: (type.register) is child of: 28
debug(database): 31: creating register
debug(database): 31: adding name: coex_pti
debug(database): 31: adding description: ??
debug(database): 31: adding offset: 0x404
debug(database): 31: adding size: 32
debug(database): 31: adding access: Database.Access.read_write
debug(database): 31: adding register mask: 0xffffffff
debug(database): 31: adding reset value: 0
debug(database): 31: (type.register) is child of: 28
debug(database): 32: creating register
debug(database): 32: adding name: coex_state
debug(database): 32: adding description: ??
debug(database): 32: adding offset: 0x408
debug(database): 32: adding size: 32
debug(database): 32: adding access: Database.Access.read_write
debug(database): 32: adding register mask: 0xffffffff
debug(database): 32: adding reset value: 0
debug(database): 32: (type.register) is child of: 28
debug(database): 33: creating register
debug(database): 33: adding name: coex_interrupt
debug(database): 33: adding description: ??
debug(database): 33: adding offset: 0x40c
debug(database): 33: adding size: 32
debug(database): 33: adding access: Database.Access.read_write
debug(database): 33: adding register mask: 0xffffffff
debug(database): 33: adding reset value: 0
debug(database): 33: (type.register) is child of: 28
debug(database): 34: creating register
debug(database): 34: adding name: coex_control_1
debug(database): 34: adding description: ??
debug(database): 34: adding offset: 0x410
debug(database): 34: adding size: 32
debug(database): 34: adding access: Database.Access.read_write
debug(database): 34: adding register mask: 0xffffffff
debug(database): 34: adding reset value: 0
debug(database): 34: (type.register) is child of: 28
debug(database): 35: creating peripheral
debug(database): 35: adding name: EMAC
debug(database): 35: adding description: Ethernet Media Access Control
debug(database): 36: creating peripheral instance
debug(database): 36: adding name: EMAC
debug(database): 36: adding offset: 0x20070000
debug(database): 36: (instance.peripheral) is child of: 0
debug(database): 36: adding description: Ethernet Media Access Control
debug(database): 37: creating register
debug(database): 37: adding name: mode
debug(database): 37: adding description: Interface enables and configurations
debug(database): 37: adding offset: 0x0
debug(database): 37: adding size: 32
debug(database): 37: adding access: Database.Access.read_write
debug(database): 37: adding register mask: 0xffffffff
debug(database): 37: adding reset value: 0
debug(database): 37: (type.register) is child of: 35
debug(database): 38: creating register
debug(database): 38: adding name: interrupt_source
debug(database): 38: adding description: Interrupt source register
debug(database): 38: adding offset: 0x4
debug(database): 38: adding size: 32
debug(database): 38: adding access: Database.Access.read_write
debug(database): 38: adding register mask: 0xffffffff
debug(database): 38: adding reset value: 0
debug(database): 38: (type.register) is child of: 35
debug(database): 39: creating field
debug(database): 39: adding name: control_receive
debug(database): 39: adding description: Control frame received interrupt state
debug(database): 39: adding offset: 0x6
debug(database): 39: adding size: 1
debug(database): 39: (type.field) is child of: 38
debug(svd): 39: creating enum: InterruptState
debug(database): 40: creating enum
debug(database): 40: adding name: InterruptState
debug(database): 40: adding size: 1
debug(database): 40: (type.enum) is child of: 35
debug(database): 41: creating enum field
debug(database): 41: adding name: has_interrupt
debug(database): 41: adding description: Has interrupt
debug(database): 41: (type.enum_field) is child of: 40
debug(database): 42: creating enum field
debug(database): 42: adding name: no_interrupt
debug(database): 42: adding description: No interrupt occurred
debug(database): 42: (type.enum_field) is child of: 40
debug(database): 43: creating field
debug(database): 43: adding name: control_transmit
debug(database): 43: adding description: Control frame transmitted interrupt state
debug(database): 43: adding offset: 0x5
debug(database): 43: adding size: 1
debug(database): 43: (type.field) is child of: 38
debug(svd): 43: creating enum: null
debug(database): 44: creating enum
debug(database): 44: adding size: 1
debug(database): 44: (type.enum) is child of: 35
debug(svd): 44: derived from 'InterruptState'
debug(database): 45: creating field
debug(database): 45: adding name: busy
debug(database): 45: adding description: Lack of buffer interrupt state
debug(database): 45: adding offset: 0x4
debug(database): 45: adding size: 1
debug(database): 45: (type.field) is child of: 38
debug(svd): 45: creating enum: null
debug(database): 46: creating enum
debug(database): 46: adding size: 1
debug(database): 46: (type.enum) is child of: 35
debug(svd): 46: derived from 'InterruptState'
debug(database): 47: creating field
debug(database): 47: adding name: receive_error
debug(database): 47: adding description: Receive error interrupt state
debug(database): 47: adding offset: 0x3
debug(database): 47: adding size: 1
debug(database): 47: (type.field) is child of: 38
debug(svd): 47: creating enum: null
debug(database): 48: creating enum
debug(database): 48: adding size: 1
debug(database): 48: (type.enum) is child of: 35
debug(svd): 48: derived from 'InterruptState'
debug(database): 49: creating field
debug(database): 49: adding name: frame_received
debug(database): 49: adding description: Frame received interrupt state
debug(database): 49: adding offset: 0x2
debug(database): 49: adding size: 1
debug(database): 49: (type.field) is child of: 38
debug(svd): 49: creating enum: null
debug(database): 50: creating enum
debug(database): 50: adding size: 1
debug(database): 50: (type.enum) is child of: 35
debug(svd): 50: derived from 'InterruptState'
debug(database): 51: creating field
debug(database): 51: adding name: transmit_error
debug(database): 51: adding description: Transmit error interrupt state
debug(database): 51: adding offset: 0x1
debug(database): 51: adding size: 1
debug(database): 51: (type.field) is child of: 38
debug(svd): 51: creating enum: null
debug(database): 52: creating enum
debug(database): 52: adding size: 1
debug(database): 52: (type.enum) is child of: 35
debug(svd): 52: derived from 'InterruptState'
debug(database): 53: creating field
debug(database): 53: adding name: buffer_transmitted
debug(database): 53: adding description: Buffer transmitted interrupt state
debug(database): 53: adding offset: 0x0
debug(database): 53: adding size: 1
debug(database): 53: (type.field) is child of: 38
debug(svd): 53: creating enum: null
debug(database): 54: creating enum
debug(database): 54: adding size: 1
debug(database): 54: (type.enum) is child of: 35
debug(svd): 54: derived from 'InterruptState'
debug(database): 55: creating register
debug(database): 55: adding name: interrupt_mask
debug(database): 55: adding description: Interrupt mask register
debug(database): 55: adding offset: 0x8
debug(database): 55: adding size: 32
debug(database): 55: adding access: Database.Access.read_write
debug(database): 55: adding register mask: 0xffffffff
debug(database): 55: adding reset value: 0
debug(database): 55: (type.register) is child of: 35
debug(database): 56: creating field
debug(database): 56: adding name: control_receive
debug(database): 56: adding description: Control frame received interrupt mask
debug(database): 56: adding offset: 0x6
debug(database): 56: adding size: 1
debug(database): 56: (type.field) is child of: 55
debug(svd): 56: creating enum: InterruptMask
debug(database): 57: creating enum
debug(database): 57: adding name: InterruptMask
debug(database): 57: adding size: 1
debug(database): 57: (type.enum) is child of: 35
debug(database): 58: creating enum field
debug(database): 58: adding name: mask
debug(database): 58: adding description: Mask interrupt
debug(database): 58: (type.enum_field) is child of: 57
debug(database): 59: creating enum field
debug(database): 59: adding name: unmask
debug(database): 59: adding description: Unmask interrupt
debug(database): 59: (type.enum_field) is child of: 57
debug(database): 60: creating field
debug(database): 60: adding name: control_transmit
debug(database): 60: adding description: Control frame transmitted interrupt mask
debug(database): 60: adding offset: 0x5
debug(database): 60: adding size: 1
debug(database): 60: (type.field) is child of: 55
debug(svd): 60: creating enum: null
debug(database): 61: creating enum
debug(database): 61: adding size: 1
debug(database): 61: (type.enum) is child of: 35
debug(svd): 61: derived from 'InterruptMask'
debug(database): 62: creating field
debug(database): 62: adding name: busy
debug(database): 62: adding description: Lack of buffer interrupt mask
debug(database): 62: adding offset: 0x4
debug(database): 62: adding size: 1
debug(database): 62: (type.field) is child of: 55
debug(svd): 62: creating enum: null
debug(database): 63: creating enum
debug(database): 63: adding size: 1
debug(database): 63: (type.enum) is child of: 35
debug(svd): 63: derived from 'InterruptMask'
debug(database): 64: creating field
debug(database): 64: adding name: receive_error
debug(database): 64: adding description: Receive error interrupt mask
debug(database): 64: adding offset: 0x3
debug(database): 64: adding size: 1
debug(database): 64: (type.field) is child of: 55
debug(svd): 64: creating enum: null
debug(database): 65: creating enum
debug(database): 65: adding size: 1
debug(database): 65: (type.enum) is child of: 35
debug(svd): 65: derived from 'InterruptMask'
debug(database): 66: creating field
debug(database): 66: adding name: frame_received
debug(database): 66: adding description: Frame received interrupt mask
debug(database): 66: adding offset: 0x2
debug(database): 66: adding size: 1
debug(database): 66: (type.field) is child of: 55
debug(svd): 66: creating enum: null
debug(database): 67: creating enum
debug(database): 67: adding size: 1
debug(database): 67: (type.enum) is child of: 35
debug(svd): 67: derived from 'InterruptMask'
debug(database): 68: creating field
debug(database): 68: adding name: transmit_error
debug(database): 68: adding description: Transmit error interrupt mask
debug(database): 68: adding offset: 0x1
debug(database): 68: adding size: 1
debug(database): 68: (type.field) is child of: 55
debug(svd): 68: creating enum: null
debug(database): 69: creating enum
debug(database): 69: adding size: 1
debug(database): 69: (type.enum) is child of: 35
debug(svd): 69: derived from 'InterruptMask'
debug(database): 70: creating field
debug(database): 70: adding name: buffer_transmitted
debug(database): 70: adding description: Buffer transmitted interrupt mask
debug(database): 70: adding offset: 0x0
debug(database): 70: adding size: 1
debug(database): 70: (type.field) is child of: 55
debug(svd): 70: creating enum: null
debug(database): 71: creating enum
debug(database): 71: adding size: 1
debug(database): 71: (type.enum) is child of: 35
debug(svd): 71: derived from 'InterruptMask'
debug(database): 72: creating register
debug(database): 72: adding name: backed_gap
debug(database): 72: adding description: Back-to-back inter-packet gap register
debug(database): 72: adding offset: 0xc
debug(database): 72: adding size: 32
debug(database): 72: adding access: Database.Access.read_write
debug(database): 72: adding register mask: 0xffffffff
debug(database): 72: adding reset value: 0
debug(database): 72: (type.register) is child of: 35
debug(database): 73: creating register
debug(database): 73: adding name: non_backed_gap_1
debug(database): 73: adding description: Non back-to-back inter-packet gap register 1
debug(database): 73: adding offset: 0x10
debug(database): 73: adding size: 32
debug(database): 73: adding access: Database.Access.read_write
debug(database): 73: adding register mask: 0xffffffff
debug(database): 73: adding reset value: 0
debug(database): 73: (type.register) is child of: 35
debug(database): 74: creating register
debug(database): 74: adding name: non_backed_gap_2
debug(database): 74: adding description: Non back-to-back inter-packet gap register 2
debug(database): 74: adding offset: 0x14
debug(database): 74: adding size: 32
debug(database): 74: adding access: Database.Access.read_write
debug(database): 74: adding register mask: 0xffffffff
debug(database): 74: adding reset value: 0
debug(database): 74: (type.register) is child of: 35
debug(database): 75: creating register
debug(database): 75: adding name: frame_length
debug(database): 75: adding description: Minimum and maximum ethernet frame length
debug(database): 75: adding offset: 0x18
debug(database): 75: adding size: 32
debug(database): 75: adding access: Database.Access.read_write
debug(database): 75: adding register mask: 0xffffffff
debug(database): 75: adding reset value: 0
debug(database): 75: (type.register) is child of: 35
debug(database): 76: creating register
debug(database): 76: adding name: collision
debug(database): 76: adding description: Collision time window and maximum retries
debug(database): 76: adding offset: 0x1c
debug(database): 76: adding size: 32
debug(database): 76: adding access: Database.Access.read_write
debug(database): 76: adding register mask: 0xffffffff
debug(database): 76: adding reset value: 0
debug(database): 76: (type.register) is child of: 35
debug(database): 77: creating register
debug(database): 77: adding name: transmit_buffer
debug(database): 77: adding description: Transmit buffer descriptor
debug(database): 77: adding offset: 0x20
debug(database): 77: adding size: 32
debug(database): 77: adding access: Database.Access.read_write
debug(database): 77: adding register mask: 0xffffffff
debug(database): 77: adding reset value: 0
debug(database): 77: (type.register) is child of: 35
debug(database): 78: creating register
debug(database): 78: adding name: flow_control
debug(database): 78: adding description: Control frame function register
debug(database): 78: adding offset: 0x24
debug(database): 78: adding size: 32
debug(database): 78: adding access: Database.Access.read_write
debug(database): 78: adding register mask: 0xffffffff
debug(database): 78: adding reset value: 0
debug(database): 78: (type.register) is child of: 35
debug(database): 79: creating register
debug(database): 79: adding name: mii_mode
debug(database): 79: adding description: MII clock divider and premable enable
debug(database): 79: adding offset: 0x28
debug(database): 79: adding size: 32
debug(database): 79: adding access: Database.Access.read_write
debug(database): 79: adding register mask: 0xffffffff
debug(database): 79: adding reset value: 0
debug(database): 79: (type.register) is child of: 35
debug(database): 80: creating register
debug(database): 80: adding name: mii_command
debug(database): 80: adding description: MII control data, read and scan state
debug(database): 80: adding offset: 0x2c
debug(database): 80: adding size: 32
debug(database): 80: adding access: Database.Access.read_write
debug(database): 80: adding register mask: 0xffffffff
debug(database): 80: adding reset value: 0
debug(database): 80: (type.register) is child of: 35
debug(database): 81: creating register
debug(database): 81: adding name: mii_address
debug(database): 81: adding description: Physical layer bus address
debug(database): 81: adding offset: 0x30
debug(database): 81: adding size: 32
debug(database): 81: adding access: Database.Access.read_write
debug(database): 81: adding register mask: 0xffffffff
debug(database): 81: adding reset value: 0
debug(database): 81: (type.register) is child of: 35
debug(database): 82: creating register
debug(database): 82: adding name: control_write
debug(database): 82: adding description: Write data to MII physcial layer
debug(database): 82: adding offset: 0x34
debug(database): 82: adding size: 32
debug(database): 82: adding access: Database.Access.read_write
debug(database): 82: adding register mask: 0xffffffff
debug(database): 82: adding reset value: 0
debug(database): 82: (type.register) is child of: 35
debug(database): 83: creating register
debug(database): 83: adding name: control_read
debug(database): 83: adding description: Read data from MII physcial layer
debug(database): 83: adding offset: 0x38
debug(database): 83: adding size: 32
debug(database): 83: adding access: Database.Access.read_write
debug(database): 83: adding register mask: 0xffffffff
debug(database): 83: adding reset value: 0
debug(database): 83: (type.register) is child of: 35
debug(database): 84: creating register
debug(database): 84: adding name: mii_state
debug(database): 84: adding description: MII bus and link layer state
debug(database): 84: adding offset: 0x3c
debug(database): 84: adding size: 32
debug(database): 84: adding access: Database.Access.read_write
debug(database): 84: adding register mask: 0xffffffff
debug(database): 84: adding reset value: 0
debug(database): 84: (type.register) is child of: 35
debug(database): 85: creating register
debug(database): 85: adding name: mac_address
debug(database): 85: adding description: Media Access Control address
debug(database): 85: adding offset: 0x40
debug(database): 85: adding size: 32
debug(database): 85: adding count: 2
debug(database): 85: adding access: Database.Access.read_write
debug(database): 85: adding register mask: 0xffffffff
debug(database): 85: adding reset value: 0
debug(database): 85: (type.register) is child of: 35
debug(database): 86: creating register
debug(database): 86: adding name: hash
debug(database): 86: adding description: Hash register
debug(database): 86: adding offset: 0x48
debug(database): 86: adding size: 32
debug(database): 86: adding count: 2
debug(database): 86: adding access: Database.Access.read_write
debug(database): 86: adding register mask: 0xffffffff
debug(database): 86: adding reset value: 0
debug(database): 86: (type.register) is child of: 35
debug(database): 87: creating register
debug(database): 87: adding name: transmit_control
debug(database): 87: adding description: Transmit control register
debug(database): 87: adding offset: 0x50
debug(database): 87: adding size: 32
debug(database): 87: adding access: Database.Access.read_write
debug(database): 87: adding register mask: 0xffffffff
debug(database): 87: adding reset value: 0
debug(database): 87: (type.register) is child of: 35
debug(database): 88: creating peripheral
debug(database): 88: adding name: SDH
debug(database): 88: adding description: Secure Digital host control
debug(database): 89: creating peripheral instance
debug(database): 89: adding name: SDH
debug(database): 89: adding offset: 0x20060000
debug(database): 89: (instance.peripheral) is child of: 0
debug(database): 89: adding description: Secure Digital host control
debug(database): 90: creating register
debug(database): 90: adding name: todo
debug(database): 90: adding description: ??
debug(database): 90: adding offset: 0x0
debug(database): 90: adding size: 32
debug(database): 90: adding access: Database.Access.read_write
debug(database): 90: adding register mask: 0xffffffff
debug(database): 90: adding reset value: 0
debug(database): 90: (type.register) is child of: 88
debug(database): 91: creating peripheral
debug(database): 91: adding name: AUDIO
debug(database): 91: adding description: Audio codec controller
debug(database): 92: creating peripheral instance
debug(database): 92: adding name: AUDIO
debug(database): 92: adding offset: 0x20055000
debug(database): 92: (instance.peripheral) is child of: 0
debug(database): 92: adding description: Audio codec controller
debug(database): 93: creating register
debug(database): 93: adding name: todo
debug(database): 93: adding description: ??
debug(database): 93: adding offset: 0x0
debug(database): 93: adding size: 32
debug(database): 93: adding access: Database.Access.read_write
debug(database): 93: adding register mask: 0xffffffff
debug(database): 93: adding reset value: 0
debug(database): 93: (type.register) is child of: 91
debug(database): 94: creating peripheral
debug(database): 94: adding name: USB
debug(database): 94: adding description: Universal Serial Bus host
debug(database): 95: creating peripheral instance
debug(database): 95: adding name: USB
debug(database): 95: adding offset: 0x20072000
debug(database): 95: (instance.peripheral) is child of: 0
debug(database): 95: adding description: Universal Serial Bus host
warning(svd): TODO clusters. name: capability
warning(svd): TODO clusters. name: operation
debug(database): 96: creating peripheral
debug(database): 96: adding name: PSRAM
debug(database): 96: adding description: Pseudo Static Random Access Memory control
debug(database): 97: creating peripheral instance
debug(database): 97: adding name: PSRAM
debug(database): 97: adding offset: 0x20052000
debug(database): 97: (instance.peripheral) is child of: 0
debug(database): 97: adding description: Pseudo Static Random Access Memory control
debug(database): 98: creating register
debug(database): 98: adding name: todo
debug(database): 98: adding description: ??
debug(database): 98: adding offset: 0x0
debug(database): 98: adding size: 32
debug(database): 98: adding access: Database.Access.read_write
debug(database): 98: adding register mask: 0xffffffff
debug(database): 98: adding reset value: 0
debug(database): 98: (type.register) is child of: 96
debug(database): 99: creating peripheral
debug(database): 99: adding name: AON
debug(database): 99: adding description: Always-On function control
debug(database): 100: creating peripheral instance
debug(database): 100: adding name: AON
debug(database): 100: adding offset: 0x2000f800
debug(database): 100: (instance.peripheral) is child of: 0
debug(database): 100: adding description: Always-On function control
debug(database): 101: creating register
debug(database): 101: adding name: todo
debug(database): 101: adding description: ??
debug(database): 101: adding offset: 0x0
debug(database): 101: adding size: 32
debug(database): 101: adding access: Database.Access.read_write
debug(database): 101: adding register mask: 0xffffffff
debug(database): 101: adding reset value: 0
debug(database): 101: (type.register) is child of: 99
debug(database): 102: creating peripheral
debug(database): 102: adding name: HBN
debug(database): 102: adding description: Hibernate (Deep sleep) control
debug(database): 103: creating peripheral instance
debug(database): 103: adding name: HBN
debug(database): 103: adding offset: 0x2000f000
debug(database): 103: (instance.peripheral) is child of: 0
debug(database): 103: adding description: Hibernate (Deep sleep) control
debug(database): 104: creating register
debug(database): 104: adding name: control
debug(database): 104: adding description: Miscellaneous control register
debug(database): 104: adding offset: 0x0
debug(database): 104: adding size: 32
debug(database): 104: adding access: Database.Access.read_write
debug(database): 104: adding register mask: 0xffffffff
debug(database): 104: adding reset value: 0
debug(database): 104: (type.register) is child of: 102
debug(database): 105: creating register
debug(database): 105: adding name: time_lo
debug(database): 105: adding description: Low bits of hibernate time
debug(database): 105: adding offset: 0x4
debug(database): 105: adding size: 32
debug(database): 105: adding access: Database.Access.read_write
debug(database): 105: adding register mask: 0xffffffff
debug(database): 105: adding reset value: 0
debug(database): 105: (type.register) is child of: 102
debug(database): 106: creating register
debug(database): 106: adding name: time_hi
debug(database): 106: adding description: High bits of hibernate time
debug(database): 106: adding offset: 0x8
debug(database): 106: adding size: 32
debug(database): 106: adding access: Database.Access.read_write
debug(database): 106: adding register mask: 0xffffffff
debug(database): 106: adding reset value: 0
debug(database): 106: (type.register) is child of: 102
debug(database): 107: creating register
debug(database): 107: adding name: rtc_time_lo
debug(database): 107: adding description: Low bits of Real-Time Clock time
debug(database): 107: adding offset: 0xc
debug(database): 107: adding size: 32
debug(database): 107: adding access: Database.Access.read_write
debug(database): 107: adding register mask: 0xffffffff
debug(database): 107: adding reset value: 0
debug(database): 107: (type.register) is child of: 102
debug(database): 108: creating register
debug(database): 108: adding name: rtc_time_hi
debug(database): 108: adding description: High bits of Real-Time Clock time
debug(database): 108: adding offset: 0x10
debug(database): 108: adding size: 32
debug(database): 108: adding access: Database.Access.read_write
debug(database): 108: adding register mask: 0xffffffff
debug(database): 108: adding reset value: 0
debug(database): 108: (type.register) is child of: 102
debug(database): 109: creating register
debug(database): 109: adding name: interrupt_mode
debug(database): 109: adding description: Hibernate interrupt contol
debug(database): 109: adding offset: 0x14
debug(database): 109: adding size: 32
debug(database): 109: adding access: Database.Access.read_write
debug(database): 109: adding register mask: 0xffffffff
debug(database): 109: adding reset value: 0
debug(database): 109: (type.register) is child of: 102
debug(database): 110: creating register
debug(database): 110: adding name: interrupt_state
debug(database): 110: adding description: Hibernate interrupt state
debug(database): 110: adding offset: 0x18
debug(database): 110: adding size: 32
debug(database): 110: adding access: Database.Access.read_write
debug(database): 110: adding register mask: 0xffffffff
debug(database): 110: adding reset value: 0
debug(database): 110: (type.register) is child of: 102
debug(database): 111: creating register
debug(database): 111: adding name: interrupt_clear
debug(database): 111: adding description: Clear hibernate interrupt
debug(database): 111: adding offset: 0x1c
debug(database): 111: adding size: 32
debug(database): 111: adding access: Database.Access.read_write
debug(database): 111: adding register mask: 0xffffffff
debug(database): 111: adding reset value: 0
debug(database): 111: (type.register) is child of: 102
debug(database): 112: creating register
debug(database): 112: adding name: global
debug(database): 112: adding description: Global hibernate configuration
debug(database): 112: adding offset: 0x30
debug(database): 112: adding size: 32
debug(database): 112: adding access: Database.Access.read_write
debug(database): 112: adding register mask: 0xffffffff
debug(database): 112: adding reset value: 0
debug(database): 112: (type.register) is child of: 102
debug(database): 113: creating register
debug(database): 113: adding name: sram
debug(database): 113: adding description: Static Random-Access Memory hibernate control
debug(database): 113: adding offset: 0x34
debug(database): 113: adding size: 32
debug(database): 113: adding access: Database.Access.read_write
debug(database): 113: adding register mask: 0xffffffff
debug(database): 113: adding reset value: 0
debug(database): 113: (type.register) is child of: 102
debug(database): 114: creating register
debug(database): 114: adding name: rc32k
debug(database): 114: adding description: 32-kHz internal RC oscillator control
debug(database): 114: adding offset: 0x200
debug(database): 114: adding size: 32
debug(database): 114: adding access: Database.Access.read_write
debug(database): 114: adding register mask: 0xffffffff
debug(database): 114: adding reset value: 0
debug(database): 114: (type.register) is child of: 102
debug(database): 115: creating register
debug(database): 115: adding name: xtal32k
debug(database): 115: adding description: External crystal oscillator control
debug(database): 115: adding offset: 0x204
debug(database): 115: adding size: 32
debug(database): 115: adding access: Database.Access.read_write
debug(database): 115: adding register mask: 0xffffffff
debug(database): 115: adding reset value: 0
debug(database): 115: (type.register) is child of: 102
debug(database): 116: creating register
debug(database): 116: adding name: rtc_control_0
debug(database): 116: adding description: Real-Time Clock control and reset register 0
debug(database): 116: adding offset: 0x208
debug(database): 116: adding size: 32
debug(database): 116: adding access: Database.Access.read_write
debug(database): 116: adding register mask: 0xffffffff
debug(database): 116: adding reset value: 0
debug(database): 116: (type.register) is child of: 102
debug(database): 117: creating register
debug(database): 117: adding name: rtc_control_1
debug(database): 117: adding description: Real-Time Clock control and reset register 1
debug(database): 117: adding offset: 0x20c
debug(database): 117: adding size: 32
debug(database): 117: adding access: Database.Access.read_write
debug(database): 117: adding register mask: 0xffffffff
debug(database): 117: adding reset value: 0
debug(database): 117: (type.register) is child of: 102
debug(database): 118: creating peripheral
debug(database): 118: adding name: PDS
debug(database): 118: adding description: Power-Down Sleep control
debug(database): 119: creating peripheral instance
debug(database): 119: adding name: PDS
debug(database): 119: adding offset: 0x2000e000
debug(database): 119: (instance.peripheral) is child of: 0
debug(database): 119: adding description: Power-Down Sleep control
debug(database): 120: creating register
debug(database): 120: adding name: touch_config
debug(database): 120: adding description: ??
debug(database): 120: adding offset: 0xa00
debug(database): 120: adding size: 32
debug(database): 120: adding access: Database.Access.read_write
debug(database): 120: adding register mask: 0xffffffff
debug(database): 120: adding reset value: 0
debug(database): 120: (type.register) is child of: 118
debug(database): 121: creating register
debug(database): 121: adding name: touch_channel
debug(database): 121: adding description: ??
debug(database): 121: adding offset: 0xa04
debug(database): 121: adding size: 32
debug(database): 121: adding access: Database.Access.read_write
debug(database): 121: adding register mask: 0xffffffff
debug(database): 121: adding reset value: 0
debug(database): 121: (type.register) is child of: 118
debug(database): 122: creating register
debug(database): 122: adding name: touch_process
debug(database): 122: adding description: ??
debug(database): 122: adding offset: 0xa08
debug(database): 122: adding size: 32
debug(database): 122: adding access: Database.Access.read_write
debug(database): 122: adding register mask: 0xffffffff
debug(database): 122: adding reset value: 0
debug(database): 122: (type.register) is child of: 118
debug(database): 123: creating register
debug(database): 123: adding name: touch_sleep
debug(database): 123: adding description: ??
debug(database): 123: adding offset: 0xa0c
debug(database): 123: adding size: 32
debug(database): 123: adding access: Database.Access.read_write
debug(database): 123: adding register mask: 0xffffffff
debug(database): 123: adding reset value: 0
debug(database): 123: (type.register) is child of: 118
debug(database): 124: creating register
debug(database): 124: adding name: touch_delay
debug(database): 124: adding description: ??
debug(database): 124: adding offset: 0xa10
debug(database): 124: adding size: 32
debug(database): 124: adding access: Database.Access.read_write
debug(database): 124: adding register mask: 0xffffffff
debug(database): 124: adding reset value: 0
debug(database): 124: (type.register) is child of: 118
debug(database): 125: creating register
debug(database): 125: adding name: touch_force
debug(database): 125: adding description: ??
debug(database): 125: adding offset: 0xa14
debug(database): 125: adding size: 32
debug(database): 125: adding count: 6
debug(database): 125: adding access: Database.Access.read_write
debug(database): 125: adding register mask: 0xffffffff
debug(database): 125: adding reset value: 0
debug(database): 125: (type.register) is child of: 118
debug(database): 126: creating register
debug(database): 126: adding name: touch_voltage
debug(database): 126: adding description: ??
debug(database): 126: adding offset: 0xa2c
debug(database): 126: adding size: 32
debug(database): 126: adding count: 3
debug(database): 126: adding access: Database.Access.read_write
debug(database): 126: adding register mask: 0xffffffff
debug(database): 126: adding reset value: 0
debug(database): 126: (type.register) is child of: 118
debug(database): 127: creating register
debug(database): 127: adding name: touch_raw
debug(database): 127: adding description: ??
debug(database): 127: adding offset: 0xa38
debug(database): 127: adding size: 32
debug(database): 127: adding count: 12
debug(database): 127: adding access: Database.Access.read_write
debug(database): 127: adding register mask: 0xffffffff
debug(database): 127: adding reset value: 0
debug(database): 127: (type.register) is child of: 118
debug(database): 128: creating register
debug(database): 128: adding name: touch_interrupt_0
debug(database): 128: adding description: ??
debug(database): 128: adding offset: 0xacc
debug(database): 128: adding size: 32
debug(database): 128: adding access: Database.Access.read_write
debug(database): 128: adding register mask: 0xffffffff
debug(database): 128: adding reset value: 0
debug(database): 128: (type.register) is child of: 118
debug(database): 129: creating register
debug(database): 129: adding name: touch_interrupt_1
debug(database): 129: adding description: ??
debug(database): 129: adding offset: 0xad0
debug(database): 129: adding size: 32
debug(database): 129: adding access: Database.Access.read_write
debug(database): 129: adding register mask: 0xffffffff
debug(database): 129: adding reset value: 0
debug(database): 129: (type.register) is child of: 118
debug(database): 130: creating peripheral
debug(database): 130: adding name: DMA%s
debug(database): 130: adding description: Direct Memory Access
debug(database): 131: creating peripheral instance
debug(database): 131: adding name: DMA%s
debug(database): 131: adding offset: 0x2000c000
debug(database): 131: (instance.peripheral) is child of: 0
debug(database): 131: adding count: 2
debug(database): 130: adding size: 512
debug(database): 131: adding description: Direct Memory Access
debug(database): 132: creating register
debug(database): 132: adding name: todo
debug(database): 132: adding description: ??
debug(database): 132: adding offset: 0x0
debug(database): 132: adding size: 32
debug(database): 132: adding access: Database.Access.read_write
debug(database): 132: adding register mask: 0xffffffff
debug(database): 132: adding reset value: 0
debug(database): 132: (type.register) is child of: 130
debug(database): 133: creating peripheral
debug(database): 133: adding name: FLASH
debug(database): 133: adding description: Quad Serial Flash control
debug(database): 134: creating peripheral instance
debug(database): 134: adding name: FLASH
debug(database): 134: adding offset: 0x2000b000
debug(database): 134: (instance.peripheral) is child of: 0
debug(database): 134: adding description: Quad Serial Flash control
debug(database): 135: creating register
debug(database): 135: adding name: todo
debug(database): 135: adding description: ??
debug(database): 135: adding offset: 0x0
debug(database): 135: adding size: 32
debug(database): 135: adding access: Database.Access.read_write
debug(database): 135: adding register mask: 0xffffffff
debug(database): 135: adding reset value: 0
debug(database): 135: (type.register) is child of: 133
debug(database): 136: creating peripheral
debug(database): 136: adding name: LZ4D
debug(database): 136: adding description: Hardware LZ4 Decompressor
debug(database): 137: creating peripheral instance
debug(database): 137: adding name: LZ4D
debug(database): 137: adding offset: 0x2000ad00
debug(database): 137: (instance.peripheral) is child of: 0
debug(database): 137: adding description: Hardware LZ4 Decompressor
debug(database): 138: creating register
debug(database): 138: adding name: config
debug(database): 138: adding description: Decompressor peripheral configuration
debug(database): 138: adding offset: 0x0
debug(database): 138: adding size: 32
debug(database): 138: adding access: Database.Access.read_write
debug(database): 138: adding register mask: 0xffffffff
debug(database): 138: adding reset value: 0
debug(database): 138: (type.register) is child of: 136
debug(database): 139: creating field
debug(database): 139: adding name: enable
debug(database): 139: adding description: Enable peripheral decompression
debug(database): 139: adding offset: 0x0
debug(database): 139: adding size: 1
debug(database): 139: (type.field) is child of: 138
debug(database): 140: creating field
debug(database): 140: adding name: suspend
debug(database): 140: adding description: Suspend peripheral decompression
debug(database): 140: adding offset: 0x1
debug(database): 140: adding size: 1
debug(database): 140: (type.field) is child of: 138
debug(database): 141: creating field
debug(database): 141: adding name: has_checksum
debug(database): 141: adding description: Does this block includes an LZ4 checksum?\n\n
Users should read checksum flag from frame descriptor to fill in correct value
for this register field.
debug(database): 141: adding offset: 0x4
debug(database): 141: adding size: 1
debug(database): 141: (type.field) is child of: 138
debug(database): 142: creating register
debug(database): 142: adding name: source_start
debug(database): 142: adding description: Writes source address before decompression
debug(database): 142: adding offset: 0x10
debug(database): 142: adding size: 32
debug(database): 142: adding access: Database.Access.read_write
debug(database): 142: adding register mask: 0xffffffff
debug(database): 142: adding reset value: 0
debug(database): 142: (type.register) is child of: 136
debug(database): 143: creating field
debug(database): 143: adding name: start
debug(database): 143: adding description: Start address
debug(database): 143: adding offset: 0x0
debug(database): 143: adding size: 26
debug(database): 143: (type.field) is child of: 142
debug(database): 144: creating field
debug(database): 144: adding name: base
debug(database): 144: adding description: Address base
debug(database): 144: adding offset: 0x1a
debug(database): 144: adding size: 6
debug(database): 144: (type.field) is child of: 142
debug(database): 145: creating register
debug(database): 145: adding name: source_end
debug(database): 145: adding description: Reads the end address of source after decompression
debug(database): 145: adding offset: 0x14
debug(database): 145: adding size: 32
debug(database): 145: adding access: Database.Access.read_only
debug(database): 145: adding register mask: 0xffffffff
debug(database): 145: adding reset value: 0
debug(database): 145: (type.register) is child of: 136
debug(database): 146: creating field
debug(database): 146: adding name: end
debug(database): 146: adding description: End of address
debug(database): 146: adding offset: 0x0
debug(database): 146: adding size: 26
debug(database): 146: (type.field) is child of: 145
debug(database): 147: creating register
debug(database): 147: adding name: destination_start
debug(database): 147: adding description: Writes destination address before decompression
debug(database): 147: adding offset: 0x18
debug(database): 147: adding size: 32
debug(database): 147: adding access: Database.Access.read_write
debug(database): 147: adding register mask: 0xffffffff
debug(database): 147: adding reset value: 0
debug(database): 147: (type.register) is child of: 136
debug(database): 148: creating field
debug(database): 148: adding name: start
debug(database): 148: adding description: Start address
debug(database): 148: adding offset: 0x0
debug(database): 148: adding size: 26
debug(database): 148: (type.field) is child of: 147
debug(database): 149: creating field
debug(database): 149: adding name: base
debug(database): 149: adding description: Address base
debug(database): 149: adding offset: 0x1a
debug(database): 149: adding size: 6
debug(database): 149: (type.field) is child of: 147
debug(database): 150: creating register
debug(database): 150: adding name: destination_end
debug(database): 150: adding description: Reads the end address of destination after decompression
debug(database): 150: adding offset: 0x1c
debug(database): 150: adding size: 32
debug(database): 150: adding access: Database.Access.read_only
debug(database): 150: adding register mask: 0xffffffff
debug(database): 150: adding reset value: 0
debug(database): 150: (type.register) is child of: 136
debug(database): 151: creating field
debug(database): 151: adding name: end
debug(database): 151: adding description: End of address
debug(database): 151: adding offset: 0x0
debug(database): 151: adding size: 26
debug(database): 151: (type.field) is child of: 150
debug(database): 152: creating register
debug(database): 152: adding name: interrupt_enable
debug(database): 152: adding description: Interrupt enable register
debug(database): 152: adding offset: 0x20
debug(database): 152: adding size: 32
debug(database): 152: adding access: Database.Access.read_write
debug(database): 152: adding register mask: 0xffffffff
debug(database): 152: adding reset value: 3
debug(database): 152: (type.register) is child of: 136
debug(database): 153: creating field
debug(database): 153: adding name: done
debug(database): 153: adding description: Decompliation finished
debug(database): 153: adding offset: 0x0
debug(database): 153: adding size: 1
debug(database): 153: (type.field) is child of: 152
debug(svd): 153: creating enum: InterruptEnable
debug(database): 154: creating enum
debug(database): 154: adding name: InterruptEnable
debug(database): 154: adding size: 1
debug(database): 154: (type.enum) is child of: 136
debug(database): 155: creating enum field
debug(database): 155: adding name: enable
debug(database): 155: adding description: Enable interrupt
debug(database): 155: (type.enum_field) is child of: 154
debug(database): 156: creating enum field
debug(database): 156: adding name: disable
debug(database): 156: adding description: Disable interrupt
debug(database): 156: (type.enum_field) is child of: 154
debug(database): 157: creating field
debug(database): 157: adding name: error
debug(database): 157: adding description: Error occurred while decompliation
debug(database): 157: adding offset: 0x1
debug(database): 157: adding size: 1
debug(database): 157: (type.field) is child of: 152
debug(svd): 157: creating enum: null
debug(database): 158: creating enum
debug(database): 158: adding size: 1
debug(database): 158: (type.enum) is child of: 136
debug(svd): 158: derived from 'InterruptEnable'
debug(database): 159: creating register
debug(database): 159: adding name: interrupt_state
debug(database): 159: adding description: Interrupt state register
debug(database): 159: adding offset: 0x24
debug(database): 159: adding size: 32
debug(database): 159: adding access: Database.Access.read_only
debug(database): 159: adding register mask: 0xffffffff
debug(database): 159: adding reset value: 0
debug(database): 159: (type.register) is child of: 136
debug(database): 160: creating field
debug(database): 160: adding name: done
debug(database): 160: adding description: Decompliation finished
debug(database): 160: adding offset: 0x0
debug(database): 160: adding size: 1
debug(database): 160: (type.field) is child of: 159
debug(svd): 160: creating enum: InterruptState
debug(database): 161: creating enum
debug(database): 161: adding name: InterruptState
debug(database): 161: adding size: 1
debug(database): 161: (type.enum) is child of: 136
debug(database): 162: creating enum field
debug(database): 162: adding name: has_interrupt
debug(database): 162: adding description: Has interrupt
debug(database): 162: (type.enum_field) is child of: 161
debug(database): 163: creating enum field
debug(database): 163: adding name: no_interrupt
debug(database): 163: adding description: No interrupt occurred
debug(database): 163: (type.enum_field) is child of: 161
debug(database): 164: creating field
debug(database): 164: adding name: error
debug(database): 164: adding description: Error occurred while decompliation
debug(database): 164: adding offset: 0x1
debug(database): 164: adding size: 1
debug(database): 164: (type.field) is child of: 159
debug(svd): 164: creating enum: null
debug(database): 165: creating enum
debug(database): 165: adding size: 1
debug(database): 165: (type.enum) is child of: 136
debug(svd): 165: derived from 'InterruptState'
debug(database): 166: creating peripheral
debug(database): 166: adding name: PDM
debug(database): 166: adding description: Pulse Density Modulation
debug(database): 167: creating peripheral instance
debug(database): 167: adding name: PDM
debug(database): 167: adding offset: 0x2000ac00
debug(database): 167: (instance.peripheral) is child of: 0
debug(database): 167: adding description: Pulse Density Modulation
debug(database): 168: creating register
debug(database): 168: adding name: todo
debug(database): 168: adding description: ??
debug(database): 168: adding offset: 0x0
debug(database): 168: adding size: 32
debug(database): 168: adding access: Database.Access.read_write
debug(database): 168: adding register mask: 0xffffffff
debug(database): 168: adding reset value: 0
debug(database): 168: (type.register) is child of: 166
debug(database): 169: creating peripheral
debug(database): 169: adding name: I2S
debug(database): 169: adding description: Inter-IC Sound controller
debug(database): 170: creating peripheral instance
debug(database): 170: adding name: I2S
debug(database): 170: adding offset: 0x2000ab00
debug(database): 170: (instance.peripheral) is child of: 0
debug(database): 170: adding description: Inter-IC Sound controller
debug(database): 171: creating register
debug(database): 171: adding name: config
debug(database): 171: adding description: Function configuration register
debug(database): 171: adding offset: 0x0
debug(database): 171: adding size: 32
debug(database): 171: adding access: Database.Access.read_write
debug(database): 171: adding register mask: 0xffffffff
debug(database): 171: adding reset value: 0
debug(database): 171: (type.register) is child of: 169
debug(database): 172: creating register
debug(database): 172: adding name: interrupt_state
debug(database): 172: adding description: Interrupt enables, masks and states
debug(database): 172: adding offset: 0x4
debug(database): 172: adding size: 32
debug(database): 172: adding access: Database.Access.read_write
debug(database): 172: adding register mask: 0xffffffff
debug(database): 172: adding reset value: 0
debug(database): 172: (type.register) is child of: 169
debug(database): 173: creating register
debug(database): 173: adding name: base_clock
debug(database): 173: adding description: Base clock divider
debug(database): 173: adding offset: 0x10
debug(database): 173: adding size: 32
debug(database): 173: adding access: Database.Access.read_write
debug(database): 173: adding register mask: 0xffffffff
debug(database): 173: adding reset value: 65537
debug(database): 173: (type.register) is child of: 169
debug(database): 174: creating field
debug(database): 174: adding name: divide_high
debug(database): 174: adding description: Higher half of base clock dividing factor
debug(database): 174: adding offset: 0x10
debug(database): 174: adding size: 12
debug(database): 174: (type.field) is child of: 173
debug(database): 174: adding access: Database.Access.read_write
debug(database): 175: creating field
debug(database): 175: adding name: divide_low
debug(database): 175: adding description: Lower half of base clock dividing factor
debug(database): 175: adding offset: 0x0
debug(database): 175: adding size: 12
debug(database): 175: (type.field) is child of: 173
debug(database): 175: adding access: Database.Access.read_write
debug(database): 176: creating register
debug(database): 176: adding name: fifo_config_0
debug(database): 176: adding description: FIFO configuration register 0
debug(database): 176: adding offset: 0x80
debug(database): 176: adding size: 32
debug(database): 176: adding access: Database.Access.read_write
debug(database): 176: adding register mask: 0xffffffff
debug(database): 176: adding reset value: 0
debug(database): 176: (type.register) is child of: 169
debug(database): 177: creating field
debug(database): 177: adding name: left_justified
debug(database): 177: adding offset: 0xa
debug(database): 177: adding size: 1
debug(database): 177: (type.field) is child of: 176
debug(database): 178: creating field
debug(database): 178: adding name: swap_left_right
debug(database): 178: adding offset: 0x9
debug(database): 178: adding size: 1
debug(database): 178: (type.field) is child of: 176
debug(database): 179: creating field
debug(database): 179: adding name: merge_left_right
debug(database): 179: adding offset: 0x8
debug(database): 179: adding size: 1
debug(database): 179: (type.field) is child of: 176
debug(database): 180: creating field
debug(database): 180: adding name: receive_underflow
debug(database): 180: adding description: Receive FIFO underflow flag\n\n
Can be cleared using `receive_clear`.
debug(database): 180: adding offset: 0x7
debug(database): 180: adding size: 1
debug(database): 180: (type.field) is child of: 176
debug(database): 180: adding access: Database.Access.read_only
debug(svd): 180: creating enum: HasUnderflow
debug(database): 181: creating enum
debug(database): 181: adding name: HasUnderflow
debug(database): 181: adding size: 1
debug(database): 181: (type.enum) is child of: 169
debug(database): 182: creating enum field
debug(database): 182: adding name: not_underflow
debug(database): 182: adding description: No FIFO buffer underflow
debug(database): 182: (type.enum_field) is child of: 181
debug(database): 183: creating enum field
debug(database): 183: adding name: underflow
debug(database): 183: adding description: Has FIFO buffer underflow
debug(database): 183: (type.enum_field) is child of: 181
debug(database): 184: creating field
debug(database): 184: adding name: receive_overflow
debug(database): 184: adding description: Receive FIFO overflow flag\n\n
Can be cleared using `receive_clear`.
debug(database): 184: adding offset: 0x6
debug(database): 184: adding size: 1
debug(database): 184: (type.field) is child of: 176
debug(database): 184: adding access: Database.Access.read_only
debug(svd): 184: creating enum: HasOverflow
debug(database): 185: creating enum
debug(database): 185: adding name: HasOverflow
debug(database): 185: adding size: 1
debug(database): 185: (type.enum) is child of: 169
debug(database): 186: creating enum field
debug(database): 186: adding name: not_overflow
debug(database): 186: adding description: No FIFO buffer overflow
debug(database): 186: (type.enum_field) is child of: 185
debug(database): 187: creating enum field
debug(database): 187: adding name: overflow
debug(database): 187: adding description: Has FIFO buffer overflow
debug(database): 187: (type.enum_field) is child of: 185
debug(database): 188: creating field
debug(database): 188: adding name: transmit_underflow
debug(database): 188: adding description: Transmit FIFO underflow flag\n\n
Can be cleared using `transmit_clear`.
debug(database): 188: adding offset: 0x5
debug(database): 188: adding size: 1
debug(database): 188: (type.field) is child of: 176
debug(database): 188: adding access: Database.Access.read_only
debug(svd): 188: creating enum: null
debug(database): 189: creating enum
debug(database): 189: adding size: 1
debug(database): 189: (type.enum) is child of: 169
debug(svd): 189: derived from 'HasUnderflow'
debug(database): 190: creating field
debug(database): 190: adding name: transmit_overflow
debug(database): 190: adding description: Transmit FIFO overflow flag\n\n
Can be cleared using `transmit_clear`.
debug(database): 190: adding offset: 0x4
debug(database): 190: adding size: 1
debug(database): 190: (type.field) is child of: 176
debug(database): 190: adding access: Database.Access.read_only
debug(svd): 190: creating enum: null
debug(database): 191: creating enum
debug(database): 191: adding size: 1
debug(database): 191: (type.enum) is child of: 169
debug(svd): 191: derived from 'HasOverflow'
debug(database): 192: creating field
debug(database): 192: adding name: receive_clear
debug(database): 192: adding description: Clears receive FIFO overflow and underflow flags
debug(database): 192: adding offset: 0x3
debug(database): 192: adding size: 1
debug(database): 192: (type.field) is child of: 176
debug(database): 192: adding access: Database.Access.write_only
debug(svd): 192: creating enum: FlagClear
debug(database): 193: creating enum
debug(database): 193: adding name: FlagClear
debug(database): 193: adding size: 1
debug(database): 193: (type.enum) is child of: 169
debug(database): 194: creating enum field
debug(database): 194: adding name: clear
debug(database): 194: adding description: Write 1 to clear fifo flags
debug(database): 194: (type.enum_field) is child of: 193
debug(database): 195: creating field
debug(database): 195: adding name: transmit_clear
debug(database): 195: adding description: Clears transmit FIFO overflow and underflow flags
debug(database): 195: adding offset: 0x2
debug(database): 195: adding size: 1
debug(database): 195: (type.field) is child of: 176
debug(database): 195: adding access: Database.Access.write_only
debug(svd): 195: creating enum: null
debug(database): 196: creating enum
debug(database): 196: adding size: 1
debug(database): 196: (type.enum) is child of: 169
debug(svd): 196: derived from 'FlagClear'
debug(database): 197: creating field
debug(database): 197: adding name: receive_dma
debug(database): 197: adding description: Enable signal of receive DMA interface
debug(database): 197: adding offset: 0x1
debug(database): 197: adding size: 1
debug(database): 197: (type.field) is child of: 176
debug(svd): 197: creating enum: DmaEnable
debug(database): 198: creating enum
debug(database): 198: adding name: DmaEnable
debug(database): 198: adding size: 1
debug(database): 198: (type.enum) is child of: 169
debug(database): 199: creating enum field
debug(database): 199: adding name: enable
debug(database): 199: adding description: Enable DMA interface
debug(database): 199: (type.enum_field) is child of: 198
debug(database): 200: creating enum field
debug(database): 200: adding name: disable
debug(database): 200: adding description: Disable DMA interface
debug(database): 200: (type.enum_field) is child of: 198
debug(database): 201: creating field
debug(database): 201: adding name: transmit_dma
debug(database): 201: adding description: Enable signal of transmit DMA interface
debug(database): 201: adding offset: 0x0
debug(database): 201: adding size: 1
debug(database): 201: (type.field) is child of: 176
debug(svd): 201: creating enum: null
debug(database): 202: creating enum
debug(database): 202: adding size: 1
debug(database): 202: (type.enum) is child of: 169
debug(svd): 202: derived from 'DmaEnable'
debug(database): 203: creating register
debug(database): 203: adding name: fifo_config_1
debug(database): 203: adding description: FIFO configuration register 1
debug(database): 203: adding offset: 0x84
debug(database): 203: adding size: 32
debug(database): 203: adding access: Database.Access.read_write
debug(database): 203: adding register mask: 0xffffffff
debug(database): 203: adding reset value: 16
debug(database): 203: (type.register) is child of: 169
debug(database): 204: creating field
debug(database): 204: adding name: receive_threshold
debug(database): 204: adding description: Receive FIFO threshold\n\n
DMA request will not be asserted if `receive_available` is less than this value
debug(database): 204: adding offset: 0x18
debug(database): 204: adding size: 4
debug(database): 204: (type.field) is child of: 203
debug(database): 205: creating field
debug(database): 205: adding name: transmit_threshold
debug(database): 205: adding description: Transmit FIFO threshold\n\n
DMA request will not be asserted if `transmit_available` is less than this value
debug(database): 205: adding offset: 0x10
debug(database): 205: adding size: 4
debug(database): 205: (type.field) is child of: 203
debug(database): 206: creating field
debug(database): 206: adding name: receive_count
debug(database): 206: adding description: Count of available data in receive FIFO
debug(database): 206: adding offset: 0x8
debug(database): 206: adding size: 5
debug(database): 206: (type.field) is child of: 203
debug(database): 206: adding access: Database.Access.read_only
debug(database): 207: creating field
debug(database): 207: adding name: transmit_count
debug(database): 207: adding description: Count of available data in transmit FIFO
debug(database): 207: adding offset: 0x0
debug(database): 207: adding size: 5
debug(database): 207: (type.field) is child of: 203
debug(database): 207: adding access: Database.Access.read_only
debug(database): 208: creating register
debug(database): 208: adding name: data_write
debug(database): 208: adding description: FIFO write data register
debug(database): 208: adding offset: 0x88
debug(database): 208: adding size: 32
debug(database): 208: adding access: Database.Access.write_only
debug(database): 208: adding register mask: 0xffffffff
debug(database): 208: adding reset value: 0
debug(database): 208: (type.register) is child of: 169
debug(database): 209: creating field
debug(database): 209: adding name: value
debug(database): 209: adding description: Write data to FIFO
debug(database): 209: adding offset: 0x0
debug(database): 209: adding size: 8
debug(database): 209: (type.field) is child of: 208
debug(database): 210: creating register
debug(database): 210: adding name: data_read
debug(database): 210: adding description: FIFO read data register
debug(database): 210: adding offset: 0x8c
debug(database): 210: adding size: 32
debug(database): 210: adding access: Database.Access.read_only
debug(database): 210: adding register mask: 0xffffffff
debug(database): 210: adding reset value: 0
debug(database): 210: (type.register) is child of: 169
debug(database): 211: creating field
debug(database): 211: adding name: value
debug(database): 211: adding description: Read data from FIFO
debug(database): 211: adding offset: 0x0
debug(database): 211: adding size: 8
debug(database): 211: (type.field) is child of: 210
debug(database): 212: creating peripheral
debug(database): 212: adding name: ISO11898
debug(database): 212: adding description: ISO 11898 communication protocol
debug(database): 213: creating peripheral instance
debug(database): 213: adding name: ISO11898
debug(database): 213: adding offset: 0x2000aa00
debug(database): 213: (instance.peripheral) is child of: 0
debug(database): 213: adding description: ISO 11898 communication protocol
debug(database): 214: creating register
debug(database): 214: adding name: todo
debug(database): 214: adding description: ??
debug(database): 214: adding offset: 0x0
debug(database): 214: adding size: 32
debug(database): 214: adding access: Database.Access.read_write
debug(database): 214: adding register mask: 0xffffffff
debug(database): 214: adding reset value: 0
debug(database): 214: (type.register) is child of: 212
debug(database): 215: creating peripheral
debug(database): 215: adding name: IPC
debug(database): 215: adding description: Inter-processor Channel
debug(database): 216: creating peripheral instance
debug(database): 216: adding name: IPC
debug(database): 216: adding offset: 0x2000a800
debug(database): 216: (instance.peripheral) is child of: 0
debug(database): 216: adding description: Inter-processor Channel
debug(database): 217: creating register
debug(database): 217: adding name: todo
debug(database): 217: adding description: ??
debug(database): 217: adding offset: 0x0
debug(database): 217: adding size: 32
debug(database): 217: adding access: Database.Access.read_write
debug(database): 217: adding register mask: 0xffffffff
debug(database): 217: adding reset value: 0
debug(database): 217: (type.register) is child of: 215
debug(database): 218: creating peripheral
debug(database): 218: adding name: IR
debug(database): 218: adding description: Infrared Remote module
debug(database): 219: creating peripheral instance
debug(database): 219: adding name: IR
debug(database): 219: adding offset: 0x2000a600
debug(database): 219: (instance.peripheral) is child of: 0
debug(database): 219: adding description: Infrared Remote module
debug(database): 220: creating register
debug(database): 220: adding name: transmit_config
debug(database): 220: adding description: ??
debug(database): 220: adding offset: 0x0
debug(database): 220: adding size: 32
debug(database): 220: adding access: Database.Access.read_write
debug(database): 220: adding register mask: 0xffffffff
debug(database): 220: adding reset value: 0
debug(database): 220: (type.register) is child of: 218
debug(database): 221: creating register
debug(database): 221: adding name: transmit_interrupt
debug(database): 221: adding description: ??
debug(database): 221: adding offset: 0x4
debug(database): 221: adding size: 32
debug(database): 221: adding access: Database.Access.read_write
debug(database): 221: adding register mask: 0xffffffff
debug(database): 221: adding reset value: 0
debug(database): 221: (type.register) is child of: 218
debug(database): 222: creating register
debug(database): 222: adding name: transmit_data
debug(database): 222: adding description: ??
debug(database): 222: adding offset: 0x8
debug(database): 222: adding size: 32
debug(database): 222: adding count: 2
debug(database): 222: adding access: Database.Access.read_write
debug(database): 222: adding register mask: 0xffffffff
debug(database): 222: adding reset value: 0
debug(database): 222: (type.register) is child of: 218
debug(database): 223: creating register
debug(database): 223: adding name: transmit_width
debug(database): 223: adding description: ??
debug(database): 223: adding offset: 0x10
debug(database): 223: adding size: 32
debug(database): 223: adding access: Database.Access.read_write
debug(database): 223: adding register mask: 0xffffffff
debug(database): 223: adding reset value: 0
debug(database): 223: (type.register) is child of: 218
debug(database): 224: creating register
debug(database): 224: adding name: receive_config
debug(database): 224: adding description: ??
debug(database): 224: adding offset: 0x80
debug(database): 224: adding size: 32
debug(database): 224: adding access: Database.Access.read_write
debug(database): 224: adding register mask: 0xffffffff
debug(database): 224: adding reset value: 0
debug(database): 224: (type.register) is child of: 218
debug(database): 225: creating register
debug(database): 225: adding name: receive_interrupt
debug(database): 225: adding description: ??
debug(database): 225: adding offset: 0x84
debug(database): 225: adding size: 32
debug(database): 225: adding access: Database.Access.read_write
debug(database): 225: adding register mask: 0xffffffff
debug(database): 225: adding reset value: 0
debug(database): 225: (type.register) is child of: 218
debug(database): 226: creating register
debug(database): 226: adding name: receive_width
debug(database): 226: adding description: ??
debug(database): 226: adding offset: 0x88
debug(database): 226: adding size: 32
debug(database): 226: adding access: Database.Access.read_write
debug(database): 226: adding register mask: 0xffffffff
debug(database): 226: adding reset value: 0
debug(database): 226: (type.register) is child of: 218
debug(database): 227: creating register
debug(database): 227: adding name: receive_bit_count
debug(database): 227: adding description: ??
debug(database): 227: adding offset: 0x90
debug(database): 227: adding size: 32
debug(database): 227: adding access: Database.Access.read_write
debug(database): 227: adding register mask: 0xffffffff
debug(database): 227: adding reset value: 0
debug(database): 227: (type.register) is child of: 218
debug(database): 228: creating register
debug(database): 228: adding name: receive_data
debug(database): 228: adding description: ??
debug(database): 228: adding offset: 0x94
debug(database): 228: adding size: 32
debug(database): 228: adding count: 2
debug(database): 228: adding access: Database.Access.read_write
debug(database): 228: adding register mask: 0xffffffff
debug(database): 228: adding reset value: 0
debug(database): 228: (type.register) is child of: 218
debug(database): 229: creating peripheral
debug(database): 229: adding name: TIMER
debug(database): 229: adding description: Timer control
debug(database): 230: creating peripheral instance
debug(database): 230: adding name: TIMER
debug(database): 230: adding offset: 0x2000a500
debug(database): 230: (instance.peripheral) is child of: 0
debug(database): 230: adding description: Timer control
debug(database): 231: creating register
debug(database): 231: adding name: todo
debug(database): 231: adding description: ??
debug(database): 231: adding offset: 0x0
debug(database): 231: adding size: 32
debug(database): 231: adding access: Database.Access.read_write
debug(database): 231: adding register mask: 0xffffffff
debug(database): 231: adding reset value: 0
debug(database): 231: (type.register) is child of: 229
debug(database): 232: creating peripheral
debug(database): 232: adding name: PWM
debug(database): 232: adding description: Pulse-Width Modulation module
debug(database): 233: creating peripheral instance
debug(database): 233: adding name: PWM
debug(database): 233: adding offset: 0x2000a400
debug(database): 233: (instance.peripheral) is child of: 0
debug(database): 233: adding description: Pulse-Width Modulation module
debug(database): 234: creating register
debug(database): 234: adding name: interrupt_config
debug(database): 234: adding description: Interrupt state and clear register
debug(database): 234: adding offset: 0x0
debug(database): 234: adding size: 32
debug(database): 234: adding access: Database.Access.read_write
debug(database): 234: adding register mask: 0xffffffff
debug(database): 234: adding reset value: 0
debug(database): 234: (type.register) is child of: 232
warning(svd): TODO clusters. name: group[%s]
warning(svd): failed to load cluster: error.TodoDimElements
debug(database): 235: creating peripheral
debug(database): 235: adding name: I2C[%s]
debug(database): 235: adding description: Inter-Integrated Circuit bus
debug(database): 236: creating peripheral instance
debug(database): 236: adding name: I2C[%s]
debug(database): 236: adding offset: 0x2000a300
debug(database): 236: (instance.peripheral) is child of: 0
debug(database): 236: adding count: 2
debug(database): 235: adding size: 1536
debug(database): 236: adding description: Inter-Integrated Circuit bus
debug(database): 237: creating register
debug(database): 237: adding name: config
debug(database): 237: adding description: Function configuration register
debug(database): 237: adding offset: 0x0
debug(database): 237: adding size: 32
debug(database): 237: adding access: Database.Access.read_write
debug(database): 237: adding register mask: 0xffffffff
debug(database): 237: adding reset value: 10
debug(database): 237: (type.register) is child of: 235
debug(database): 238: creating field
debug(database): 238: adding name: deglitch_cycle
debug(database): 238: adding description: De-glitch function cycle count
debug(database): 238: adding offset: 0x1c
debug(database): 238: adding size: 4
debug(database): 238: (type.field) is child of: 237
debug(database): 239: creating field
debug(database): 239: adding name: packet_length
debug(database): 239: adding description: Byte count for each packet
debug(database): 239: adding offset: 0x10
debug(database): 239: adding size: 8
debug(database): 239: (type.field) is child of: 237
debug(database): 240: creating field
debug(database): 240: adding name: slave_address
debug(database): 240: adding description: I2C transaction slave address
debug(database): 240: adding offset: 0x8
debug(database): 240: adding size: 7
debug(database): 240: (type.field) is child of: 237
debug(database): 241: creating field
debug(database): 241: adding name: sub_address_length
debug(database): 241: adding description: Byte count for I2C sub-address
debug(database): 241: adding offset: 0x5
debug(database): 241: adding size: 2
debug(database): 241: (type.field) is child of: 237
debug(svd): 241: creating enum: null
debug(database): 242: creating enum
debug(database): 242: adding size: 2
debug(database): 242: (type.enum) is child of: 235
debug(database): 243: creating enum field
debug(database): 243: adding name: one
debug(database): 243: adding description: Sub-addresses include 1 byte
debug(database): 243: (type.enum_field) is child of: 242
debug(database): 244: creating enum field
debug(database): 244: adding name: two
debug(database): 244: adding description: Sub-addresses include 2 bytes
debug(database): 244: (type.enum_field) is child of: 242
debug(database): 245: creating enum field
debug(database): 245: adding name: three
debug(database): 245: adding description: Sub-addresses include 3 bytes
debug(database): 245: (type.enum_field) is child of: 242
debug(database): 246: creating enum field
debug(database): 246: adding name: four
debug(database): 246: adding description: Sub-addresses include 4 bytes
debug(database): 246: (type.enum_field) is child of: 242
debug(database): 247: creating field
debug(database): 247: adding name: sub_address_enable
debug(database): 247: adding description: Enable sub-address fields
debug(database): 247: adding offset: 0x4
debug(database): 247: adding size: 1
debug(database): 247: (type.field) is child of: 237
debug(svd): 247: creating enum: null
debug(database): 248: creating enum
debug(database): 248: adding size: 1
debug(database): 248: (type.enum) is child of: 235
debug(database): 249: creating enum field
debug(database): 249: adding name: enable
debug(database): 249: adding description: Enable sub-address fields
debug(database): 249: (type.enum_field) is child of: 248
debug(database): 250: creating enum field
debug(database): 250: adding name: disable
debug(database): 250: adding description: Disable sub-address fields
debug(database): 250: (type.enum_field) is child of: 248
debug(database): 251: creating field
debug(database): 251: adding name: clock_synchronize
debug(database): 251: adding description: Enable I2C clock synchronization\n\n
Enable this bit to support multi-master and clock-stretching. It should not be turned-off normally.
debug(database): 251: adding offset: 0x3
debug(database): 251: adding size: 1
debug(database): 251: (type.field) is child of: 237
debug(svd): 251: creating enum: null
debug(database): 252: creating enum
debug(database): 252: adding size: 1
debug(database): 252: (type.enum) is child of: 235
debug(database): 253: creating enum field
debug(database): 253: adding name: enable
debug(database): 253: adding description: Enable clock synchronization
debug(database): 253: (type.enum_field) is child of: 252
debug(database): 254: creating enum field
debug(database): 254: adding name: disable
debug(database): 254: adding description: Disable clock synchronization
debug(database): 254: (type.enum_field) is child of: 252
debug(database): 255: creating field
debug(database): 255: adding name: deglitch_enable
debug(database): 255: adding description: Enable de-glitch function on all input pins
debug(database): 255: adding offset: 0x2
debug(database): 255: adding size: 1
debug(database): 255: (type.field) is child of: 237
debug(svd): 255: creating enum: null
debug(database): 256: creating enum
debug(database): 256: adding size: 1
debug(database): 256: (type.enum) is child of: 235
debug(database): 257: creating enum field
debug(database): 257: adding name: enable
debug(database): 257: adding description: Enable de-glitch function on inputs
debug(database): 257: (type.enum_field) is child of: 256
debug(database): 258: creating enum field
debug(database): 258: adding name: disable
debug(database): 258: adding description: Disable de-glitch function on inputs
debug(database): 258: (type.enum_field) is child of: 256
debug(database): 259: creating field
debug(database): 259: adding name: transfer_direction
debug(database): 259: adding description: Packet transfer direction
debug(database): 259: adding offset: 0x1
debug(database): 259: adding size: 1
debug(database): 259: (type.field) is child of: 237
debug(svd): 259: creating enum: null
debug(database): 260: creating enum
debug(database): 260: adding size: 1
debug(database): 260: (type.enum) is child of: 235
debug(database): 261: creating enum field
debug(database): 261: adding name: write
debug(database): 261: adding description: Write from master side
debug(database): 261: (type.enum_field) is child of: 260
debug(database): 262: creating enum field
debug(database): 262: adding name: read
debug(database): 262: adding description: Read from master side
debug(database): 262: (type.enum_field) is child of: 260
debug(database): 263: creating field
debug(database): 263: adding name: master_enable
debug(database): 263: adding description: Enable signal of I2C master function\n\n
Asserting this bit will trigger the transaction, and should be de-asserted after finish.
debug(database): 263: adding offset: 0x0
debug(database): 263: adding size: 1
debug(database): 263: (type.field) is child of: 237
debug(svd): 263: creating enum: null
debug(database): 264: creating enum
debug(database): 264: adding size: 1
debug(database): 264: (type.enum) is child of: 235
debug(database): 265: creating enum field
debug(database): 265: adding name: enable
debug(database): 265: adding description: Enable I2C master function
debug(database): 265: (type.enum_field) is child of: 264
debug(database): 266: creating enum field
debug(database): 266: adding name: disable
debug(database): 266: adding description: Disable I2C master function
debug(database): 266: (type.enum_field) is child of: 264
debug(database): 267: creating register
debug(database): 267: adding name: interrupt
debug(database): 267: adding description: Interrupt enables, states and masks
debug(database): 267: adding offset: 0x4
debug(database): 267: adding size: 32
debug(database): 267: adding access: Database.Access.read_write
debug(database): 267: adding register mask: 0xffffffff
debug(database): 267: adding reset value: 1056980736
debug(database): 267: (type.register) is child of: 235
debug(database): 268: creating field
debug(database): 268: adding name: fifo_error_enable
debug(database): 268: adding description: Transmit or receive FIFO error interrupt enable
debug(database): 268: adding offset: 0x1d
debug(database): 268: adding size: 1
debug(database): 268: (type.field) is child of: 267
debug(svd): 268: creating enum: InterruptEnable
debug(database): 269: creating enum
debug(database): 269: adding name: InterruptEnable
debug(database): 269: adding size: 1
debug(database): 269: (type.enum) is child of: 235
debug(database): 270: creating enum field
debug(database): 270: adding name: enable
debug(database): 270: adding description: Enable interrupt
debug(database): 270: (type.enum_field) is child of: 269
debug(database): 271: creating enum field
debug(database): 271: adding name: disable
debug(database): 271: adding description: Disable interrupt
debug(database): 271: (type.enum_field) is child of: 269
debug(database): 272: creating field
debug(database): 272: adding name: arbitrate_lost_enable
debug(database): 272: adding description: Arbitration lost interrupt enable
debug(database): 272: adding offset: 0x1c
debug(database): 272: adding size: 1
debug(database): 272: (type.field) is child of: 267
debug(svd): 272: creating enum: null
debug(database): 273: creating enum
debug(database): 273: adding size: 1
debug(database): 273: (type.enum) is child of: 235
debug(svd): 273: derived from 'InterruptEnable'
debug(database): 274: creating field
debug(database): 274: adding name: not_acknowledged_enable
debug(database): 274: adding description: Not-acknowledged response interrupt enable
debug(database): 274: adding offset: 0x1b
debug(database): 274: adding size: 1
debug(database): 274: (type.field) is child of: 267
debug(svd): 274: creating enum: null
debug(database): 275: creating enum
debug(database): 275: adding size: 1
debug(database): 275: (type.enum) is child of: 235
debug(svd): 275: derived from 'InterruptEnable'
debug(database): 276: creating field
debug(database): 276: adding name: receive_fifo_ready_enable
debug(database): 276: adding description: Receive FIFO ready interrupt enable
debug(database): 276: adding offset: 0x1a
debug(database): 276: adding size: 1
debug(database): 276: (type.field) is child of: 267
debug(svd): 276: creating enum: null
debug(database): 277: creating enum
debug(database): 277: adding size: 1
debug(database): 277: (type.enum) is child of: 235
debug(svd): 277: derived from 'InterruptEnable'
debug(database): 278: creating field
debug(database): 278: adding name: transmit_fifo_ready_enable
debug(database): 278: adding description: Transmit FIFO ready interrupt enable
debug(database): 278: adding offset: 0x19
debug(database): 278: adding size: 1
debug(database): 278: (type.field) is child of: 267
debug(svd): 278: creating enum: null
debug(database): 279: creating enum
debug(database): 279: adding size: 1
debug(database): 279: (type.enum) is child of: 235
debug(svd): 279: derived from 'InterruptEnable'
debug(database): 280: creating field
debug(database): 280: adding name: transfer_end_enable
debug(database): 280: adding description: Transfer ended interrupt enable
debug(database): 280: adding offset: 0x18
debug(database): 280: adding size: 1
debug(database): 280: (type.field) is child of: 267
debug(svd): 280: creating enum: null
debug(database): 281: creating enum
debug(database): 281: adding size: 1
debug(database): 281: (type.enum) is child of: 235
debug(svd): 281: derived from 'InterruptEnable'
debug(database): 282: creating field
debug(database): 282: adding name: arbitrate_lost_clear
debug(database): 282: adding description: Write 1 to clear arbitration lost
debug(database): 282: adding offset: 0x14
debug(database): 282: adding size: 1
debug(database): 282: (type.field) is child of: 267
debug(database): 282: adding access: Database.Access.write_only
debug(svd): 282: creating enum: InterruptClear
debug(database): 283: creating enum
debug(database): 283: adding name: InterruptClear
debug(database): 283: adding size: 1
debug(database): 283: (type.enum) is child of: 235
debug(database): 284: creating enum field
debug(database): 284: adding name: clear
debug(database): 284: adding description: Write 1 to clear interrupt state
debug(database): 284: (type.enum_field) is child of: 283
debug(database): 285: creating field
debug(database): 285: adding name: not_acknowledged_clear
debug(database): 285: adding description: Write 1 to clear not-acknowledged response
debug(database): 285: adding offset: 0x13
debug(database): 285: adding size: 1
debug(database): 285: (type.field) is child of: 267
debug(database): 285: adding access: Database.Access.write_only
debug(svd): 285: creating enum: null
debug(database): 286: creating enum
debug(database): 286: adding size: 1
debug(database): 286: (type.enum) is child of: 235
debug(svd): 286: derived from 'InterruptClear'
debug(database): 287: creating field
debug(database): 287: adding name: transfer_end_clear
debug(database): 287: adding description: Write 1 to clear transfer ended
debug(database): 287: adding offset: 0x10
debug(database): 287: adding size: 1
debug(database): 287: (type.field) is child of: 267
debug(database): 287: adding access: Database.Access.write_only
debug(svd): 287: creating enum: null
debug(database): 288: creating enum
debug(database): 288: adding size: 1
debug(database): 288: (type.enum) is child of: 235
debug(svd): 288: derived from 'InterruptClear'
debug(database): 289: creating field
debug(database): 289: adding name: fifo_error_mask
debug(database): 289: adding description: Transmit or receive FIFO error interrupt mask
debug(database): 289: adding offset: 0xd
debug(database): 289: adding size: 1
debug(database): 289: (type.field) is child of: 267
debug(svd): 289: creating enum: InterruptMask
debug(database): 290: creating enum
debug(database): 290: adding name: InterruptMask
debug(database): 290: adding size: 1
debug(database): 290: (type.enum) is child of: 235
debug(database): 291: creating enum field
debug(database): 291: adding name: mask
debug(database): 291: adding description: Mask interrupt
debug(database): 291: (type.enum_field) is child of: 290
debug(database): 292: creating enum field
debug(database): 292: adding name: unmask
debug(database): 292: adding description: Unmask interrupt
debug(database): 292: (type.enum_field) is child of: 290
debug(database): 293: creating field
debug(database): 293: adding name: arbitrate_lost_mask
debug(database): 293: adding description: Arbitration lost interrupt mask
debug(database): 293: adding offset: 0xc
debug(database): 293: adding size: 1
debug(database): 293: (type.field) is child of: 267
debug(svd): 293: creating enum: null
debug(database): 294: creating enum
debug(database): 294: adding size: 1
debug(database): 294: (type.enum) is child of: 235
debug(svd): 294: derived from 'InterruptMask'
debug(database): 295: creating field
debug(database): 295: adding name: not_acknowledged_mask
debug(database): 295: adding description: Not-acknowledged response interrupt mask
debug(database): 295: adding offset: 0xb
debug(database): 295: adding size: 1
debug(database): 295: (type.field) is child of: 267
debug(svd): 295: creating enum: null
debug(database): 296: creating enum
debug(database): 296: adding size: 1
debug(database): 296: (type.enum) is child of: 235
debug(svd): 296: derived from 'InterruptMask'
debug(database): 297: creating field
debug(database): 297: adding name: receive_fifo_ready_mask
debug(database): 297: adding description: Receive FIFO ready interrupt mask
debug(database): 297: adding offset: 0xa
debug(database): 297: adding size: 1
debug(database): 297: (type.field) is child of: 267
debug(svd): 297: creating enum: null
debug(database): 298: creating enum
debug(database): 298: adding size: 1
debug(database): 298: (type.enum) is child of: 235
debug(svd): 298: derived from 'InterruptMask'
debug(database): 299: creating field
debug(database): 299: adding name: transmit_fifo_ready_mask
debug(database): 299: adding description: Transmit FIFO ready interrupt mask
debug(database): 299: adding offset: 0x9
debug(database): 299: adding size: 1
debug(database): 299: (type.field) is child of: 267
debug(svd): 299: creating enum: null
debug(database): 300: creating enum
debug(database): 300: adding size: 1
debug(database): 300: (type.enum) is child of: 235
debug(svd): 300: derived from 'InterruptMask'
debug(database): 301: creating field
debug(database): 301: adding name: transfer_end_mask
debug(database): 301: adding description: Transfer ended interrupt mask
debug(database): 301: adding offset: 0x8
debug(database): 301: adding size: 1
debug(database): 301: (type.field) is child of: 267
debug(svd): 301: creating enum: null
debug(database): 302: creating enum
debug(database): 302: adding size: 1
debug(database): 302: (type.enum) is child of: 235
debug(svd): 302: derived from 'InterruptMask'
debug(database): 303: creating field
debug(database): 303: adding name: fifo_error_state
debug(database): 303: adding description: Transmit or receive FIFO error interrupt state\n\n
Auto cleared when FIFO overflow or underflow error flag is cleared.
debug(database): 303: adding offset: 0x5
debug(database): 303: adding size: 1
debug(database): 303: (type.field) is child of: 267
debug(database): 303: adding access: Database.Access.read_only
debug(svd): 303: creating enum: InterruptState
debug(database): 304: creating enum
debug(database): 304: adding name: InterruptState
debug(database): 304: adding size: 1
debug(database): 304: (type.enum) is child of: 235
debug(database): 305: creating enum field
debug(database): 305: adding name: has_interrupt
debug(database): 305: adding description: Has interrupt
debug(database): 305: (type.enum_field) is child of: 304
debug(database): 306: creating enum field
debug(database): 306: adding name: no_interrupt
debug(database): 306: adding description: No interrupt occurred
debug(database): 306: (type.enum_field) is child of: 304
debug(database): 307: creating field
debug(database): 307: adding name: arbitrate_lost_state
debug(database): 307: adding description: Arbitration lost interrupt state
debug(database): 307: adding offset: 0x4
debug(database): 307: adding size: 1
debug(database): 307: (type.field) is child of: 267
debug(database): 307: adding access: Database.Access.read_only
debug(svd): 307: creating enum: null
debug(database): 308: creating enum
debug(database): 308: adding size: 1
debug(database): 308: (type.enum) is child of: 235
debug(svd): 308: derived from 'InterruptState'
debug(database): 309: creating field
debug(database): 309: adding name: not_acknowledged_state
debug(database): 309: adding description: Not-acknowledged response interrupt state
debug(database): 309: adding offset: 0x3
debug(database): 309: adding size: 1
debug(database): 309: (type.field) is child of: 267
debug(database): 309: adding access: Database.Access.read_only
debug(svd): 309: creating enum: null
debug(database): 310: creating enum
debug(database): 310: adding size: 1
debug(database): 310: (type.enum) is child of: 235
debug(svd): 310: derived from 'InterruptState'
debug(database): 311: creating field
debug(database): 311: adding name: receive_fifo_ready_state
debug(database): 311: adding description: Receive FIFO ready interrupt state\n\n
Auto cleared when data is popped from receive FIFO.
debug(database): 311: adding offset: 0x2
debug(database): 311: adding size: 1
debug(database): 311: (type.field) is child of: 267
debug(database): 311: adding access: Database.Access.read_only
debug(svd): 311: creating enum: null
debug(database): 312: creating enum
debug(database): 312: adding size: 1
debug(database): 312: (type.enum) is child of: 235
debug(svd): 312: derived from 'InterruptState'
debug(database): 313: creating field
debug(database): 313: adding name: transmit_fifo_ready_state
debug(database): 313: adding description: Transmit FIFO ready interrupt state\n\n
Auto cleared when data is pushed into transmit FIFO.
debug(database): 313: adding offset: 0x1
debug(database): 313: adding size: 1
debug(database): 313: (type.field) is child of: 267
debug(database): 313: adding access: Database.Access.read_only
debug(svd): 313: creating enum: null
debug(database): 314: creating enum
debug(database): 314: adding size: 1
debug(database): 314: (type.enum) is child of: 235
debug(svd): 314: derived from 'InterruptState'
debug(database): 315: creating field
debug(database): 315: adding name: transfer_end_state
debug(database): 315: adding description: Transfer ended interrupt state
debug(database): 315: adding offset: 0x0
debug(database): 315: adding size: 1
debug(database): 315: (type.field) is child of: 267
debug(database): 315: adding access: Database.Access.read_only
debug(svd): 315: creating enum: null
debug(database): 316: creating enum
debug(database): 316: adding size: 1
debug(database): 316: (type.enum) is child of: 235
debug(svd): 316: derived from 'InterruptState'
debug(database): 317: creating register
debug(database): 317: adding name: sub_address
debug(database): 317: adding description: Register address of slave device
debug(database): 317: adding offset: 0x8
debug(database): 317: adding size: 32
debug(database): 317: adding access: Database.Access.read_write
debug(database): 317: adding register mask: 0xffffffff
debug(database): 317: adding reset value: 0
debug(database): 317: (type.register) is child of: 235
debug(database): 318: creating field
debug(database): 318: adding name: byte[%s]
debug(database): 318: adding description: I2C sub-address byte %s
debug(database): 318: adding offset: 0x0
debug(database): 318: adding size: 8
debug(database): 318: adding count: 4
debug(database): 318: (type.field) is child of: 317
debug(database): 318: adding access: Database.Access.read_write
debug(database): 319: creating register
debug(database): 319: adding name: bus_busy
debug(database): 319: adding description: Bus busy state indicator
debug(database): 319: adding offset: 0xc
debug(database): 319: adding size: 32
debug(database): 319: adding access: Database.Access.read_write
debug(database): 319: adding register mask: 0xffffffff
debug(database): 319: adding reset value: 0
debug(database): 319: (type.register) is child of: 235
debug(database): 320: creating field
debug(database): 320: adding name: force_clear
debug(database): 320: adding description: Force clear I2C bus busy state\n\n
Not for normal use; only use when I2C bus hangs
debug(database): 320: adding offset: 0x1
debug(database): 320: adding size: 1
debug(database): 320: (type.field) is child of: 319
debug(database): 320: adding access: Database.Access.write_only
debug(svd): 320: creating enum: null
debug(database): 321: creating enum
debug(database): 321: adding size: 1
debug(database): 321: (type.enum) is child of: 235
debug(database): 322: creating enum field
debug(database): 322: adding name: clear
debug(database): 322: adding description: Write 1 to force clear busy flag
debug(database): 322: (type.enum_field) is child of: 321
debug(database): 323: creating field
debug(database): 323: adding name: busy
debug(database): 323: adding description: Indicator to I2C bus busy signal
debug(database): 323: adding offset: 0x0
debug(database): 323: adding size: 1
debug(database): 323: (type.field) is child of: 319
debug(database): 323: adding access: Database.Access.read_only
debug(svd): 323: creating enum: null
debug(database): 324: creating enum
debug(database): 324: adding size: 1
debug(database): 324: (type.enum) is child of: 235
debug(database): 325: creating enum field
debug(database): 325: adding name: busy
debug(database): 325: adding description: Bus is busy
debug(database): 325: (type.enum_field) is child of: 324
debug(database): 326: creating enum field
debug(database): 326: adding name: idle
debug(database): 326: adding description: Bus is not busy
debug(database): 326: (type.enum_field) is child of: 324
debug(database): 327: creating register
debug(database): 327: adding name: period_start
debug(database): 327: adding description: Duration of start phase
debug(database): 327: adding offset: 0x10
debug(database): 327: adding size: 32
debug(database): 327: adding access: Database.Access.read_write
debug(database): 327: adding register mask: 0xffffffff
debug(database): 327: adding reset value: 252645135
debug(database): 327: (type.register) is child of: 235
debug(database): 328: creating field
debug(database): 328: adding name: phase[%s]
debug(database): 328: adding description: Length of start condition phase %s
debug(database): 328: adding offset: 0x0
debug(database): 328: adding size: 8
debug(database): 328: adding count: 4
debug(database): 328: (type.field) is child of: 327
debug(database): 328: adding access: Database.Access.read_write
debug(database): 329: creating register
debug(database): 329: adding name: period_stop
debug(database): 329: adding description: Duration of stop phase
debug(database): 329: adding offset: 0x14
debug(database): 329: adding size: 32
debug(database): 329: adding access: Database.Access.read_write
debug(database): 329: adding register mask: 0xffffffff
debug(database): 329: adding reset value: 252645135
debug(database): 329: (type.register) is child of: 235
debug(database): 330: creating field
debug(database): 330: adding name: phase[%s]
debug(database): 330: adding description: Length of stop condition phase %s
debug(database): 330: adding offset: 0x0
debug(database): 330: adding size: 8
debug(database): 330: adding count: 4
debug(database): 330: (type.field) is child of: 329
debug(database): 330: adding access: Database.Access.read_write
debug(database): 331: creating register
debug(database): 331: adding name: period_data
debug(database): 331: adding description: Duration of data phase
debug(database): 331: adding offset: 0x18
debug(database): 331: adding size: 32
debug(database): 331: adding access: Database.Access.read_write
debug(database): 331: adding register mask: 0xffffffff
debug(database): 331: adding reset value: 252645135
debug(database): 331: (type.register) is child of: 235
debug(database): 332: creating field
debug(database): 332: adding name: phase[%s]
debug(database): 332: adding description: Length of data condition phase %s
debug(database): 332: adding offset: 0x0
debug(database): 332: adding size: 8
debug(database): 332: adding count: 4
debug(database): 332: (type.field) is child of: 331
debug(database): 332: adding access: Database.Access.read_write
debug(database): 333: creating register
debug(database): 333: adding name: fifo_config_0
debug(database): 333: adding description: FIFO configuration register 0
debug(database): 333: adding offset: 0x80
debug(database): 333: adding size: 32
debug(database): 333: adding access: Database.Access.read_write
debug(database): 333: adding register mask: 0xffffffff
debug(database): 333: adding reset value: 0
debug(database): 333: (type.register) is child of: 235
debug(database): 334: creating field
debug(database): 334: adding name: receive_underflow
debug(database): 334: adding description: Receive FIFO underflow flag\n\n
Can be cleared using `receive_clear`.
debug(database): 334: adding offset: 0x7
debug(database): 334: adding size: 1
debug(database): 334: (type.field) is child of: 333
debug(database): 334: adding access: Database.Access.read_only
debug(svd): 334: creating enum: HasUnderflow
debug(database): 335: creating enum
debug(database): 335: adding name: HasUnderflow
debug(database): 335: adding size: 1
debug(database): 335: (type.enum) is child of: 235
debug(database): 336: creating enum field
debug(database): 336: adding name: not_underflow
debug(database): 336: adding description: No FIFO buffer underflow
debug(database): 336: (type.enum_field) is child of: 335
debug(database): 337: creating enum field
debug(database): 337: adding name: underflow
debug(database): 337: adding description: Has FIFO buffer underflow
debug(database): 337: (type.enum_field) is child of: 335
debug(database): 338: creating field
debug(database): 338: adding name: receive_overflow
debug(database): 338: adding description: Receive FIFO overflow flag\n\n
Can be cleared using `receive_clear`.
debug(database): 338: adding offset: 0x6
debug(database): 338: adding size: 1
debug(database): 338: (type.field) is child of: 333
debug(database): 338: adding access: Database.Access.read_only
debug(svd): 338: creating enum: HasOverflow
debug(database): 339: creating enum
debug(database): 339: adding name: HasOverflow
debug(database): 339: adding size: 1
debug(database): 339: (type.enum) is child of: 235
debug(database): 340: creating enum field
debug(database): 340: adding name: not_overflow
debug(database): 340: adding description: No FIFO buffer overflow
debug(database): 340: (type.enum_field) is child of: 339
debug(database): 341: creating enum field
debug(database): 341: adding name: overflow
debug(database): 341: adding description: Has FIFO buffer overflow
debug(database): 341: (type.enum_field) is child of: 339
debug(database): 342: creating field
debug(database): 342: adding name: transmit_underflow
debug(database): 342: adding description: Transmit FIFO underflow flag\n\n
Can be cleared using `transmit_clear`.
debug(database): 342: adding offset: 0x5
debug(database): 342: adding size: 1
debug(database): 342: (type.field) is child of: 333
debug(database): 342: adding access: Database.Access.read_only
debug(svd): 342: creating enum: null
debug(database): 343: creating enum
debug(database): 343: adding size: 1
debug(database): 343: (type.enum) is child of: 235
debug(svd): 343: derived from 'HasUnderflow'
debug(database): 344: creating field
debug(database): 344: adding name: transmit_overflow
debug(database): 344: adding description: Transmit FIFO overflow flag\n\n
Can be cleared using `transmit_clear`.
debug(database): 344: adding offset: 0x4
debug(database): 344: adding size: 1
debug(database): 344: (type.field) is child of: 333
debug(database): 344: adding access: Database.Access.read_only
debug(svd): 344: creating enum: null
debug(database): 345: creating enum
debug(database): 345: adding size: 1
debug(database): 345: (type.enum) is child of: 235
debug(svd): 345: derived from 'HasOverflow'
debug(database): 346: creating field
debug(database): 346: adding name: receive_clear
debug(database): 346: adding description: Clears receive FIFO overflow and underflow flags
debug(database): 346: adding offset: 0x3
debug(database): 346: adding size: 1
debug(database): 346: (type.field) is child of: 333
debug(database): 346: adding access: Database.Access.write_only
debug(svd): 346: creating enum: FlagClear
debug(database): 347: creating enum
debug(database): 347: adding name: FlagClear
debug(database): 347: adding size: 1
debug(database): 347: (type.enum) is child of: 235
debug(database): 348: creating enum field
debug(database): 348: adding name: clear
debug(database): 348: adding description: Write 1 to clear fifo flags
debug(database): 348: (type.enum_field) is child of: 347
debug(database): 349: creating field
debug(database): 349: adding name: transmit_clear
debug(database): 349: adding description: Clears transmit FIFO overflow and underflow flags
debug(database): 349: adding offset: 0x2
debug(database): 349: adding size: 1
debug(database): 349: (type.field) is child of: 333
debug(database): 349: adding access: Database.Access.write_only
debug(svd): 349: creating enum: null
debug(database): 350: creating enum
debug(database): 350: adding size: 1
debug(database): 350: (type.enum) is child of: 235
debug(svd): 350: derived from 'FlagClear'
debug(database): 351: creating field
debug(database): 351: adding name: receive_dma
debug(database): 351: adding description: Enable signal of receive DMA interface
debug(database): 351: adding offset: 0x1
debug(database): 351: adding size: 1
debug(database): 351: (type.field) is child of: 333
debug(svd): 351: creating enum: DmaEnable
debug(database): 352: creating enum
debug(database): 352: adding name: DmaEnable
debug(database): 352: adding size: 1
debug(database): 352: (type.enum) is child of: 235
debug(database): 353: creating enum field
debug(database): 353: adding name: enable
debug(database): 353: adding description: Enable DMA interface
debug(database): 353: (type.enum_field) is child of: 352
debug(database): 354: creating enum field
debug(database): 354: adding name: disable
debug(database): 354: adding description: Disable DMA interface
debug(database): 354: (type.enum_field) is child of: 352
debug(database): 355: creating field
debug(database): 355: adding name: transmit_dma
debug(database): 355: adding description: Enable signal of transmit DMA interface
debug(database): 355: adding offset: 0x0
debug(database): 355: adding size: 1
debug(database): 355: (type.field) is child of: 333
debug(svd): 355: creating enum: null
debug(database): 356: creating enum
debug(database): 356: adding size: 1
debug(database): 356: (type.enum) is child of: 235
debug(svd): 356: derived from 'DmaEnable'
debug(database): 357: creating register
debug(database): 357: adding name: fifo_config_1
debug(database): 357: adding description: FIFO configuration register 1
debug(database): 357: adding offset: 0x84
debug(database): 357: adding size: 32
debug(database): 357: adding access: Database.Access.read_write
debug(database): 357: adding register mask: 0xffffffff
debug(database): 357: adding reset value: 2
debug(database): 357: (type.register) is child of: 235
debug(database): 358: creating field
debug(database): 358: adding name: receive_threshold
debug(database): 358: adding description: Receive FIFO threshold\n\n
DMA request will not be asserted if `receive_available` is less than this value
debug(database): 358: adding offset: 0x18
debug(database): 358: adding size: 1
debug(database): 358: (type.field) is child of: 357
debug(database): 359: creating field
debug(database): 359: adding name: transmit_threshold
debug(database): 359: adding description: Transmit FIFO threshold\n\n
DMA request will not be asserted if `transmit_available` is less than this value
debug(database): 359: adding offset: 0x10
debug(database): 359: adding size: 1
debug(database): 359: (type.field) is child of: 357
debug(database): 360: creating field
debug(database): 360: adding name: receive_count
debug(database): 360: adding description: Count of available data in receive FIFO
debug(database): 360: adding offset: 0x8
debug(database): 360: adding size: 2
debug(database): 360: (type.field) is child of: 357
debug(database): 360: adding access: Database.Access.read_only
debug(database): 361: creating field
debug(database): 361: adding name: transmit_count
debug(database): 361: adding description: Count of available data in transmit FIFO
debug(database): 361: adding offset: 0x0
debug(database): 361: adding size: 2
debug(database): 361: (type.field) is child of: 357
debug(database): 361: adding access: Database.Access.read_only
debug(database): 362: creating register
debug(database): 362: adding name: data_write
debug(database): 362: adding description: FIFO write data register
debug(database): 362: adding offset: 0x88
debug(database): 362: adding size: 32
debug(database): 362: adding access: Database.Access.write_only
debug(database): 362: adding register mask: 0xffffffff
debug(database): 362: adding reset value: 0
debug(database): 362: (type.register) is child of: 235
debug(database): 363: creating field
debug(database): 363: adding name: value
debug(database): 363: adding description: Write data to FIFO
debug(database): 363: adding offset: 0x0
debug(database): 363: adding size: 8
debug(database): 363: (type.field) is child of: 362
debug(database): 364: creating register
debug(database): 364: adding name: data_read
debug(database): 364: adding description: FIFO read data register
debug(database): 364: adding offset: 0x8c
debug(database): 364: adding size: 32
debug(database): 364: adding access: Database.Access.read_only
debug(database): 364: adding register mask: 0xffffffff
debug(database): 364: adding reset value: 0
debug(database): 364: (type.register) is child of: 235
debug(database): 365: creating field
debug(database): 365: adding name: value
debug(database): 365: adding description: Read data from FIFO
debug(database): 365: adding offset: 0x0
debug(database): 365: adding size: 8
debug(database): 365: (type.field) is child of: 364
debug(database): 366: creating peripheral
debug(database): 366: adding name: SPI[%s]
debug(database): 366: adding description: Serial Peripheral Interface
debug(database): 367: creating peripheral instance
debug(database): 367: adding name: SPI[%s]
debug(database): 367: adding offset: 0x2000a200
debug(database): 367: (instance.peripheral) is child of: 0
debug(database): 367: adding count: 1
debug(database): 366: adding size: 256
debug(database): 367: adding description: Serial Peripheral Interface
debug(database): 368: creating register
debug(database): 368: adding name: config
debug(database): 368: adding description: Function configuration register
debug(database): 368: adding offset: 0x0
debug(database): 368: adding size: 32
debug(database): 368: adding access: Database.Access.read_write
debug(database): 368: adding register mask: 0xffffffff
debug(database): 368: adding reset value: 0
debug(database): 368: (type.register) is child of: 366
debug(database): 369: creating register
debug(database): 369: adding name: interrupt_state
debug(database): 369: adding description: Interrupt enables, masks and states
debug(database): 369: adding offset: 0x4
debug(database): 369: adding size: 32
debug(database): 369: adding access: Database.Access.read_write
debug(database): 369: adding register mask: 0xffffffff
debug(database): 369: adding reset value: 0
debug(database): 369: (type.register) is child of: 366
debug(database): 370: creating register
debug(database): 370: adding name: bus_busy
debug(database): 370: adding description: Bus busy state indicator
debug(database): 370: adding offset: 0x8
debug(database): 370: adding size: 32
debug(database): 370: adding access: Database.Access.read_write
debug(database): 370: adding register mask: 0xffffffff
debug(database): 370: adding reset value: 0
debug(database): 370: (type.register) is child of: 366
debug(database): 371: creating register
debug(database): 371: adding name: period_control
debug(database): 371: adding description: Duration of control signals
debug(database): 371: adding offset: 0x10
debug(database): 371: adding size: 32
debug(database): 371: adding access: Database.Access.read_write
debug(database): 371: adding register mask: 0xffffffff
debug(database): 371: adding reset value: 0
debug(database): 371: (type.register) is child of: 366
debug(database): 372: creating register
debug(database): 372: adding name: period_interval
debug(database): 372: adding description: Interval bitween frames
debug(database): 372: adding offset: 0x14
debug(database): 372: adding size: 32
debug(database): 372: adding access: Database.Access.read_write
debug(database): 372: adding register mask: 0xffffffff
debug(database): 372: adding reset value: 0
debug(database): 372: (type.register) is child of: 366
debug(database): 373: creating register
debug(database): 373: adding name: ignore_index
debug(database): 373: adding description: Receive ignore index configuration
debug(database): 373: adding offset: 0x18
debug(database): 373: adding size: 32
debug(database): 373: adding access: Database.Access.read_write
debug(database): 373: adding register mask: 0xffffffff
debug(database): 373: adding reset value: 0
debug(database): 373: (type.register) is child of: 366
debug(database): 374: creating register
debug(database): 374: adding name: timeout
debug(database): 374: adding description: Slave mode transmit timeout values
debug(database): 374: adding offset: 0x1c
debug(database): 374: adding size: 32
debug(database): 374: adding access: Database.Access.read_write
debug(database): 374: adding register mask: 0xffffffff
debug(database): 374: adding reset value: 0
debug(database): 374: (type.register) is child of: 366
debug(database): 375: creating register
debug(database): 375: adding name: fifo_config_0
debug(database): 375: adding description: FIFO configuration register 0
debug(database): 375: adding offset: 0x80
debug(database): 375: adding size: 32
debug(database): 375: adding access: Database.Access.read_write
debug(database): 375: adding register mask: 0xffffffff
debug(database): 375: adding reset value: 0
debug(database): 375: (type.register) is child of: 366
debug(database): 376: creating register
debug(database): 376: adding name: fifo_config_1
debug(database): 376: adding description: FIFO configuration register 1
debug(database): 376: adding offset: 0x84
debug(database): 376: adding size: 32
debug(database): 376: adding access: Database.Access.read_write
debug(database): 376: adding register mask: 0xffffffff
debug(database): 376: adding reset value: 0
debug(database): 376: (type.register) is child of: 366
debug(database): 377: creating register
debug(database): 377: adding name: data_write
debug(database): 377: adding description: FIFO write data register
debug(database): 377: adding offset: 0x88
debug(database): 377: adding size: 32
debug(database): 377: adding access: Database.Access.read_write
debug(database): 377: adding register mask: 0xffffffff
debug(database): 377: adding reset value: 0
debug(database): 377: (type.register) is child of: 366
debug(database): 378: creating register
debug(database): 378: adding name: data_read
debug(database): 378: adding description: FIFO read data register
debug(database): 378: adding offset: 0x8c
debug(database): 378: adding size: 32
debug(database): 378: adding access: Database.Access.read_write
debug(database): 378: adding register mask: 0xffffffff
debug(database): 378: adding reset value: 0
debug(database): 378: (type.register) is child of: 366
debug(database): 379: creating peripheral
debug(database): 379: adding name: UART[%s]
debug(database): 379: adding description: Universal Asynchronous Receiver Transmitter
debug(database): 380: creating peripheral instance
debug(database): 380: adding name: UART[%s]
debug(database): 380: adding offset: 0x2000a000
debug(database): 380: (instance.peripheral) is child of: 0
debug(database): 380: adding count: 2
debug(database): 379: adding size: 256
debug(database): 380: adding description: Universal Asynchronous Receiver Transmitter
debug(database): 381: creating register
debug(database): 381: adding name: transmit_config
debug(database): 381: adding description: Transmit configuration register
debug(database): 381: adding offset: 0x0
debug(database): 381: adding size: 32
debug(database): 381: adding access: Database.Access.read_write
debug(database): 381: adding register mask: 0xffffffff
debug(database): 381: adding reset value: 36608
debug(database): 381: (type.register) is child of: 379
debug(database): 382: creating field
debug(database): 382: adding name: transfer_length
debug(database): 382: adding description: Length of words per UART transmit transfer\n\n
This field is ignored when `freerun` mode is enabled.
debug(database): 382: adding offset: 0x10
debug(database): 382: adding size: 16
debug(database): 382: (type.field) is child of: 381
debug(database): 383: creating field
debug(database): 383: adding name: break_bits
debug(database): 383: adding description: Number of break bits for LIN protocol
debug(database): 383: adding offset: 0xd
debug(database): 383: adding size: 3
debug(database): 383: (type.field) is child of: 381
debug(database): 384: creating field
debug(database): 384: adding name: stop_bits
debug(database): 384: adding description: Number of stop bits
debug(database): 384: adding offset: 0xb
debug(database): 384: adding size: 2
debug(database): 384: (type.field) is child of: 381
debug(svd): 384: creating enum: null
debug(database): 385: creating enum
debug(database): 385: adding size: 2
debug(database): 385: (type.enum) is child of: 379
debug(database): 386: creating enum field
debug(database): 386: adding name: zero_p_five
debug(database): 386: adding description: 0.5 stop bits
debug(database): 386: (type.enum_field) is child of: 385
debug(database): 387: creating enum field
debug(database): 387: adding name: one
debug(database): 387: adding description: 1 stop bit
debug(database): 387: (type.enum_field) is child of: 385
debug(database): 388: creating enum field
debug(database): 388: adding name: one_p_five
debug(database): 388: adding description: 1.5 stop bits
debug(database): 388: (type.enum_field) is child of: 385
debug(database): 389: creating enum field
debug(database): 389: adding name: two
debug(database): 389: adding description: 2 stop bits
debug(database): 389: (type.enum_field) is child of: 385
debug(database): 390: creating field
debug(database): 390: adding name: word_length
debug(database): 390: adding description: Bit count for each transmit data word
debug(database): 390: adding offset: 0x8
debug(database): 390: adding size: 3
debug(database): 390: (type.field) is child of: 381
debug(svd): 390: creating enum: null
debug(database): 391: creating enum
debug(database): 391: adding size: 3
debug(database): 391: (type.enum) is child of: 379
debug(database): 392: creating enum field
debug(database): 392: adding name: five
debug(database): 392: adding description: Each word includes 5 bits
debug(database): 392: (type.enum_field) is child of: 391
debug(database): 393: creating enum field
debug(database): 393: adding name: six
debug(database): 393: adding description: Each word includes 6 bits
debug(database): 393: (type.enum_field) is child of: 391
debug(database): 394: creating enum field
debug(database): 394: adding name: seven
debug(database): 394: adding description: Each word includes 7 bits
debug(database): 394: (type.enum_field) is child of: 391
debug(database): 395: creating enum field
debug(database): 395: adding name: eight
debug(database): 395: adding description: Each word includes 8 bits
debug(database): 395: (type.enum_field) is child of: 391
debug(database): 396: creating field
debug(database): 396: adding name: ir_inverse
debug(database): 396: adding description: Inverse transmit signal output in IR mode
debug(database): 396: adding offset: 0x7
debug(database): 396: adding size: 1
debug(database): 396: (type.field) is child of: 381
debug(svd): 396: creating enum: null
debug(database): 397: creating enum
debug(database): 397: adding size: 1
debug(database): 397: (type.enum) is child of: 379
debug(database): 398: creating enum field
debug(database): 398: adding name: inverse
debug(database): 398: adding description: Inverse transmit input in IR mode
debug(database): 398: (type.enum_field) is child of: 397
debug(database): 399: creating enum field
debug(database): 399: adding name: no_inverse
debug(database): 399: adding description: Don't inverse transmit input in IR mode
debug(database): 399: (type.enum_field) is child of: 397
debug(database): 400: creating field
debug(database): 400: adding name: ir_transmit
debug(database): 400: adding description: Enable IR transmit mode
debug(database): 400: adding offset: 0x6
debug(database): 400: adding size: 1
debug(database): 400: (type.field) is child of: 381
debug(svd): 400: creating enum: null
debug(database): 401: creating enum
debug(database): 401: adding size: 1
debug(database): 401: (type.enum) is child of: 379
debug(database): 402: creating enum field
debug(database): 402: adding name: enable
debug(database): 402: adding description: Enable IR transmit mode
debug(database): 402: (type.enum_field) is child of: 401
debug(database): 403: creating enum field
debug(database): 403: adding name: disable
debug(database): 403: adding description: Disable IR transmit mode
debug(database): 403: (type.enum_field) is child of: 401
debug(database): 404: creating field
debug(database): 404: adding name: parity_mode
debug(database): 404: adding description: Select transmit parity mode if enabled
debug(database): 404: adding offset: 0x5
debug(database): 404: adding size: 1
debug(database): 404: (type.field) is child of: 381
debug(svd): 404: creating enum: null
debug(database): 405: creating enum
debug(database): 405: adding size: 1
debug(database): 405: (type.enum) is child of: 379
debug(database): 406: creating enum field
debug(database): 406: adding name: odd
debug(database): 406: adding description: Odd parity if `parity_enable` is set
debug(database): 406: (type.enum_field) is child of: 405
debug(database): 407: creating enum field
debug(database): 407: adding name: even
debug(database): 407: adding description: Even parity if `parity_enable` is set
debug(database): 407: (type.enum_field) is child of: 405
debug(database): 408: creating field
debug(database): 408: adding name: parity_enable
debug(database): 408: adding description: Enable transmit parity check
debug(database): 408: adding offset: 0x4
debug(database): 408: adding size: 1
debug(database): 408: (type.field) is child of: 381
debug(svd): 408: creating enum: null
debug(database): 409: creating enum
debug(database): 409: adding size: 1
debug(database): 409: (type.enum) is child of: 379
debug(database): 410: creating enum field
debug(database): 410: adding name: enable
debug(database): 410: adding description: Enable transmit parity check
debug(database): 410: (type.enum_field) is child of: 409
debug(database): 411: creating enum field
debug(database): 411: adding name: disable
debug(database): 411: adding description: Disable transmit parity check
debug(database): 411: (type.enum_field) is child of: 409
debug(database): 412: creating field
debug(database): 412: adding name: lin_transmit
debug(database): 412: adding description: Local Interconnect Network protocol enable
debug(database): 412: adding offset: 0x3
debug(database): 412: adding size: 1
debug(database): 412: (type.field) is child of: 381
debug(svd): 412: creating enum: null
debug(database): 413: creating enum
debug(database): 413: adding size: 1
debug(database): 413: (type.enum) is child of: 379
debug(database): 414: creating enum field
debug(database): 414: adding name: enable
debug(database): 414: adding description: Enable Local Interconnect Network protocol
debug(database): 414: (type.enum_field) is child of: 413
debug(database): 415: creating enum field
debug(database): 415: adding name: disable
debug(database): 415: adding description: Disable Local Interconnect Network protocol
debug(database): 415: (type.enum_field) is child of: 413
debug(database): 416: creating field
debug(database): 416: adding name: freerun
debug(database): 416: adding description: Enable freerun mode
debug(database): 416: adding offset: 0x2
debug(database): 416: adding size: 1
debug(database): 416: (type.field) is child of: 381
debug(svd): 416: creating enum: null
debug(database): 417: creating enum
debug(database): 417: adding size: 1
debug(database): 417: (type.enum) is child of: 379
debug(database): 418: creating enum field
debug(database): 418: adding name: enable
debug(database): 418: adding description: Enable freerun mode
debug(database): 418: (type.enum_field) is child of: 417
debug(database): 419: creating enum field
debug(database): 419: adding name: disable
debug(database): 419: adding description: Disable freerun mode
debug(database): 419: (type.enum_field) is child of: 417
debug(database): 420: creating field
debug(database): 420: adding name: cts
debug(database): 420: adding description: Enable Clear-to-Send flow control signal
debug(database): 420: adding offset: 0x1
debug(database): 420: adding size: 1
debug(database): 420: (type.field) is child of: 381
debug(svd): 420: creating enum: null
debug(database): 421: creating enum
debug(database): 421: adding size: 1
debug(database): 421: (type.enum) is child of: 379
debug(database): 422: creating enum field
debug(database): 422: adding name: enable
debug(database): 422: adding description: Enable Clear-to-Send flow control signal
debug(database): 422: (type.enum_field) is child of: 421
debug(database): 423: creating enum field
debug(database): 423: adding name: disable
debug(database): 423: adding description: Disable Clear-to-Send flow control signal
debug(database): 423: (type.enum_field) is child of: 421
debug(database): 424: creating field
debug(database): 424: adding name: function
debug(database): 424: adding description: Enable transmit function
debug(database): 424: adding offset: 0x0
debug(database): 424: adding size: 1
debug(database): 424: (type.field) is child of: 381
debug(svd): 424: creating enum: null
debug(database): 425: creating enum
debug(database): 425: adding size: 1
debug(database): 425: (type.enum) is child of: 379
debug(database): 426: creating enum field
debug(database): 426: adding name: enable
debug(database): 426: adding description: Enable UART receive function signal
debug(database): 426: (type.enum_field) is child of: 425
debug(database): 427: creating enum field
debug(database): 427: adding name: disable
debug(database): 427: adding description: Disable UART receive function signal
debug(database): 427: (type.enum_field) is child of: 425
debug(database): 428: creating register
debug(database): 428: adding name: receive_config
debug(database): 428: adding description: Receive configuration register
debug(database): 428: adding offset: 0x4
debug(database): 428: adding size: 32
debug(database): 428: adding access: Database.Access.read_write
debug(database): 428: adding register mask: 0xffffffff
debug(database): 428: adding reset value: 1792
debug(database): 428: (type.register) is child of: 379
debug(database): 429: creating field
debug(database): 429: adding name: transfer_length
debug(database): 429: adding description: Length of words per UART receive transfer
debug(database): 429: adding offset: 0x10
debug(database): 429: adding size: 16
debug(database): 429: (type.field) is child of: 428
debug(database): 430: creating field
debug(database): 430: adding name: deglitch_cycle
debug(database): 430: adding description: De-glitch function cycle count
debug(database): 430: adding offset: 0xc
debug(database): 430: adding size: 4
debug(database): 430: (type.field) is child of: 428
debug(database): 431: creating field
debug(database): 431: adding name: deglitch_enable
debug(database): 431: adding description: Enable receive de-glitch function
debug(database): 431: adding offset: 0xb
debug(database): 431: adding size: 1
debug(database): 431: (type.field) is child of: 428
debug(svd): 431: creating enum: null
debug(database): 432: creating enum
debug(database): 432: adding size: 1
debug(database): 432: (type.enum) is child of: 379
debug(database): 433: creating enum field
debug(database): 433: adding name: enable
debug(database): 433: adding description: Enable de-glitch function upon receive
debug(database): 433: (type.enum_field) is child of: 432
debug(database): 434: creating enum field
debug(database): 434: adding name: disable
debug(database): 434: adding description: Disable de-glitch function upon receive
debug(database): 434: (type.enum_field) is child of: 432
debug(database): 435: creating field
debug(database): 435: adding name: word_length
debug(database): 435: adding description: Bit count for each receive data word
debug(database): 435: adding offset: 0x8
debug(database): 435: adding size: 3
debug(database): 435: (type.field) is child of: 428
debug(svd): 435: creating enum: null
debug(database): 436: creating enum
debug(database): 436: adding size: 3
debug(database): 436: (type.enum) is child of: 379
debug(database): 437: creating enum field
debug(database): 437: adding name: five
debug(database): 437: adding description: Each word includes 5 bits
debug(database): 437: (type.enum_field) is child of: 436
debug(database): 438: creating enum field
debug(database): 438: adding name: six
debug(database): 438: adding description: Each word includes 6 bits
debug(database): 438: (type.enum_field) is child of: 436
debug(database): 439: creating enum field
debug(database): 439: adding name: seven
debug(database): 439: adding description: Each word includes 7 bits
debug(database): 439: (type.enum_field) is child of: 436
debug(database): 440: creating enum field
debug(database): 440: adding name: eight
debug(database): 440: adding description: Each word includes 8 bits
debug(database): 440: (type.enum_field) is child of: 436
debug(database): 441: creating field
debug(database): 441: adding name: ir_inverse
debug(database): 441: adding description: Inverse receive signal output in IR mode
debug(database): 441: adding offset: 0x7
debug(database): 441: adding size: 1
debug(database): 441: (type.field) is child of: 428
debug(svd): 441: creating enum: null
debug(database): 442: creating enum
debug(database): 442: adding size: 1
debug(database): 442: (type.enum) is child of: 379
debug(database): 443: creating enum field
debug(database): 443: adding name: inverse
debug(database): 443: adding description: Inverse receive input in IR mode
debug(database): 443: (type.enum_field) is child of: 442
debug(database): 444: creating enum field
debug(database): 444: adding name: no_inverse
debug(database): 444: adding description: Don't inverse receive input in IR mode
debug(database): 444: (type.enum_field) is child of: 442
debug(database): 445: creating field
debug(database): 445: adding name: ir_receive
debug(database): 445: adding description: Enable IR receive mode
debug(database): 445: adding offset: 0x6
debug(database): 445: adding size: 1
debug(database): 445: (type.field) is child of: 428
debug(svd): 445: creating enum: null
debug(database): 446: creating enum
debug(database): 446: adding size: 1
debug(database): 446: (type.enum) is child of: 379
debug(database): 447: creating enum field
debug(database): 447: adding name: enable
debug(database): 447: adding description: Enable IR receive mode
debug(database): 447: (type.enum_field) is child of: 446
debug(database): 448: creating enum field
debug(database): 448: adding name: disable
debug(database): 448: adding description: Disable IR receive mode
debug(database): 448: (type.enum_field) is child of: 446
debug(database): 449: creating field
debug(database): 449: adding name: parity_mode
debug(database): 449: adding description: Select receive parity mode if enabled
debug(database): 449: adding offset: 0x5
debug(database): 449: adding size: 1
debug(database): 449: (type.field) is child of: 428
debug(svd): 449: creating enum: null
debug(database): 450: creating enum
debug(database): 450: adding size: 1
debug(database): 450: (type.enum) is child of: 379
debug(database): 451: creating enum field
debug(database): 451: adding name: odd
debug(database): 451: adding description: Odd parity if `parity_enable` is set
debug(database): 451: (type.enum_field) is child of: 450
debug(database): 452: creating enum field
debug(database): 452: adding name: even
debug(database): 452: adding description: Even parity if `parity_enable` is set
debug(database): 452: (type.enum_field) is child of: 450
debug(database): 453: creating field
debug(database): 453: adding name: parity_enable
debug(database): 453: adding description: Enable receive parity check
debug(database): 453: adding offset: 0x4
debug(database): 453: adding size: 1
debug(database): 453: (type.field) is child of: 428
debug(svd): 453: creating enum: null
debug(database): 454: creating enum
debug(database): 454: adding size: 1
debug(database): 454: (type.enum) is child of: 379
debug(database): 455: creating enum field
debug(database): 455: adding name: enable
debug(database): 455: adding description: Enable receive parity check
debug(database): 455: (type.enum_field) is child of: 454
debug(database): 456: creating enum field
debug(database): 456: adding name: disable
debug(database): 456: adding description: Disable receive parity check
debug(database): 456: (type.enum_field) is child of: 454
debug(database): 457: creating field
debug(database): 457: adding name: lin_receive
debug(database): 457: adding description: Local Interconnect Network protocol enable
debug(database): 457: adding offset: 0x3
debug(database): 457: adding size: 1
debug(database): 457: (type.field) is child of: 428
debug(svd): 457: creating enum: null
debug(database): 458: creating enum
debug(database): 458: adding size: 1
debug(database): 458: (type.enum) is child of: 379
debug(database): 459: creating enum field
debug(database): 459: adding name: enable
debug(database): 459: adding description: Enable Local Interconnect Network protocol
debug(database): 459: (type.enum_field) is child of: 458
debug(database): 460: creating enum field
debug(database): 460: adding name: disable
debug(database): 460: adding description: Disable Local Interconnect Network protocol
debug(database): 460: (type.enum_field) is child of: 458
debug(database): 461: creating field
debug(database): 461: adding name: auto_baudrate
debug(database): 461: adding description: Enable receive auto baudrate detection
debug(database): 461: adding offset: 0x1
debug(database): 461: adding size: 1
debug(database): 461: (type.field) is child of: 428
debug(svd): 461: creating enum: null
debug(database): 462: creating enum
debug(database): 462: adding size: 1
debug(database): 462: (type.enum) is child of: 379
debug(database): 463: creating enum field
debug(database): 463: adding name: enable
debug(database): 463: adding description: Enable auto baudrate upon receive
debug(database): 463: (type.enum_field) is child of: 462
debug(database): 464: creating enum field
debug(database): 464: adding name: disable
debug(database): 464: adding description: Disable auto baudrate upon receive
debug(database): 464: (type.enum_field) is child of: 462
debug(database): 465: creating field
debug(database): 465: adding name: function
debug(database): 465: adding description: Enable receive function
debug(database): 465: adding offset: 0x0
debug(database): 465: adding size: 1
debug(database): 465: (type.field) is child of: 428
debug(svd): 465: creating enum: null
debug(database): 466: creating enum
debug(database): 466: adding size: 1
debug(database): 466: (type.enum) is child of: 379
debug(database): 467: creating enum field
debug(database): 467: adding name: enable
debug(database): 467: adding description: Enable UART receive function signal
debug(database): 467: (type.enum_field) is child of: 466
debug(database): 468: creating enum field
debug(database): 468: adding name: disable
debug(database): 468: adding description: Disable UART receive function signal
debug(database): 468: (type.enum_field) is child of: 466
debug(database): 469: creating register
debug(database): 469: adding name: bit_period
debug(database): 469: adding description: Bit period control register
debug(database): 469: adding offset: 0x8
debug(database): 469: adding size: 32
debug(database): 469: adding access: Database.Access.read_write
debug(database): 469: adding register mask: 0xffffffff
debug(database): 469: adding reset value: 16711935
debug(database): 469: (type.register) is child of: 379
debug(database): 470: creating field
debug(database): 470: adding name: receive
debug(database): 470: adding description: Period of each receive bit\n\n
Add 1 to this value and divide by clock to get receive baudrate.
debug(database): 470: adding offset: 0x10
debug(database): 470: adding size: 16
debug(database): 470: (type.field) is child of: 469
debug(database): 471: creating field
debug(database): 471: adding name: transmit
debug(database): 471: adding description: Period of each transmit bit\n\n
Add 1 to this value and divide by clock to get transmit baudrate.
debug(database): 471: adding offset: 0x0
debug(database): 471: adding size: 16
debug(database): 471: (type.field) is child of: 469
debug(database): 472: creating register
debug(database): 472: adding name: data_config
debug(database): 472: adding description: Data configuration register
debug(database): 472: adding offset: 0xc
debug(database): 472: adding size: 32
debug(database): 472: adding access: Database.Access.read_write
debug(database): 472: adding register mask: 0xffffffff
debug(database): 472: adding reset value: 0
debug(database): 472: (type.register) is child of: 379
debug(database): 473: creating field
debug(database): 473: adding name: bit_order
debug(database): 473: adding description: Enable bit inverse in each data word
debug(database): 473: adding offset: 0x0
debug(database): 473: adding size: 1
debug(database): 473: (type.field) is child of: 472
debug(svd): 473: creating enum: null
debug(database): 474: creating enum
debug(database): 474: adding size: 1
debug(database): 474: (type.enum) is child of: 379
debug(database): 475: creating enum field
debug(database): 475: adding name: inverse
debug(database): 475: adding description: Each byte is sent out MSB-first
debug(database): 475: (type.enum_field) is child of: 474
debug(database): 476: creating enum field
debug(database): 476: adding name: no_inverse
debug(database): 476: adding description: Each byte is sent out LSB-first
debug(database): 476: (type.enum_field) is child of: 474
debug(database): 477: creating register
debug(database): 477: adding name: transmit_position
debug(database): 477: adding description: IR-mode transmit position control
debug(database): 477: adding offset: 0x10
debug(database): 477: adding size: 32
debug(database): 477: adding access: Database.Access.read_write
debug(database): 477: adding register mask: 0xffffffff
debug(database): 477: adding reset value: 10420336
debug(database): 477: (type.register) is child of: 379
debug(database): 478: creating field
debug(database): 478: adding name: stop
debug(database): 478: adding description: Stop position of transmit IR pulse
debug(database): 478: adding offset: 0x10
debug(database): 478: adding size: 16
debug(database): 478: (type.field) is child of: 477
debug(database): 479: creating field
debug(database): 479: adding name: start
debug(database): 479: adding description: Start position of transmit IR pulse
debug(database): 479: adding offset: 0x0
debug(database): 479: adding size: 16
debug(database): 479: (type.field) is child of: 477
debug(database): 480: creating register
debug(database): 480: adding name: receive_position
debug(database): 480: adding description: IR-mode receive position control
debug(database): 480: adding offset: 0x14
debug(database): 480: adding size: 32
debug(database): 480: adding access: Database.Access.read_write
debug(database): 480: adding register mask: 0xffffffff
debug(database): 480: adding reset value: 111
debug(database): 480: (type.register) is child of: 379
debug(database): 481: creating field
debug(database): 481: adding name: start
debug(database): 481: adding description: Start position of received pulse recovered from IR signal
debug(database): 481: adding offset: 0x0
debug(database): 481: adding size: 16
debug(database): 481: (type.field) is child of: 480
debug(database): 482: creating register
debug(database): 482: adding name: receive_timeout
debug(database): 482: adding description: Receive Time-Out interrupt control
debug(database): 482: adding offset: 0x18
debug(database): 482: adding size: 32
debug(database): 482: adding access: Database.Access.read_write
debug(database): 482: adding register mask: 0xffffffff
debug(database): 482: adding reset value: 15
debug(database): 482: (type.register) is child of: 379
debug(database): 483: creating field
debug(database): 483: adding name: value
debug(database): 483: adding description: Timeout interrupt triggering value by bits received
debug(database): 483: adding offset: 0x0
debug(database): 483: adding size: 8
debug(database): 483: (type.field) is child of: 482
debug(database): 484: creating register
debug(database): 484: adding name: signal_override
debug(database): 484: adding description: Manual override of flow control signal
debug(database): 484: adding offset: 0x1c
debug(database): 484: adding size: 32
debug(database): 484: adding access: Database.Access.read_write
debug(database): 484: adding register mask: 0xffffffff
debug(database): 484: adding reset value: 0
debug(database): 484: (type.register) is child of: 379
debug(database): 485: creating field
debug(database): 485: adding name: rts_value
debug(database): 485: adding description: Value to override Request-to-Send signal if override is enabled
debug(database): 485: adding offset: 0x3
debug(database): 485: adding size: 1
debug(database): 485: (type.field) is child of: 484
debug(svd): 485: creating enum: SignalAssert
debug(database): 486: creating enum
debug(database): 486: adding name: SignalAssert
debug(database): 486: adding size: 1
debug(database): 486: (type.enum) is child of: 379
debug(database): 487: creating enum field
debug(database): 487: adding name: high
debug(database): 487: adding description: Assert this signal
debug(database): 487: (type.enum_field) is child of: 486
debug(database): 488: creating enum field
debug(database): 488: adding name: low
debug(database): 488: adding description: Deassert this signal
debug(database): 488: (type.enum_field) is child of: 486
debug(database): 489: creating field
debug(database): 489: adding name: rts_signal
debug(database): 489: adding description: Enable manual override of Request-to-Send flow control signal
debug(database): 489: adding offset: 0x2
debug(database): 489: adding size: 1
debug(database): 489: (type.field) is child of: 484
debug(svd): 489: creating enum: OverrideEnable
debug(database): 490: creating enum
debug(database): 490: adding name: OverrideEnable
debug(database): 490: adding size: 1
debug(database): 490: (type.enum) is child of: 379
debug(database): 491: creating enum field
debug(database): 491: adding name: enable
debug(database): 491: adding description: Enable manual override of this signal
debug(database): 491: (type.enum_field) is child of: 490
debug(database): 492: creating enum field
debug(database): 492: adding name: disable
debug(database): 492: adding description: Disable manual override of this signal
debug(database): 492: (type.enum_field) is child of: 490
debug(database): 493: creating field
debug(database): 493: adding name: transmit_value
debug(database): 493: adding description: Value to override transmit signal if override is enabled
debug(database): 493: adding offset: 0x1
debug(database): 493: adding size: 1
debug(database): 493: (type.field) is child of: 484
debug(svd): 493: creating enum: null
debug(database): 494: creating enum
debug(database): 494: adding size: 1
debug(database): 494: (type.enum) is child of: 379
debug(svd): 494: derived from 'rts_value.SignalAssert'
debug(database): 495: creating field
debug(database): 495: adding name: transmit_signal
debug(database): 495: adding description: Enable manual override of transmit signal
debug(database): 495: adding offset: 0x0
debug(database): 495: adding size: 1
debug(database): 495: (type.field) is child of: 484
debug(svd): 495: creating enum: null
debug(database): 496: creating enum
debug(database): 496: adding size: 1
debug(database): 496: (type.enum) is child of: 379
debug(svd): 496: derived from 'rts_signal.OverrideEnable'
debug(database): 497: creating register
debug(database): 497: adding name: interrupt_state
debug(database): 497: adding description: Interrupt state register
debug(database): 497: adding offset: 0x20
debug(database): 497: adding size: 32
debug(database): 497: adding access: Database.Access.read_only
debug(database): 497: adding register mask: 0xffffffff
debug(database): 497: adding reset value: 4
debug(database): 497: (type.register) is child of: 379
debug(database): 498: creating field
debug(database): 498: adding name: auto_baudrate_five_five
debug(database): 498: adding description: Receive auto baudrate detection finished using 0x55 occurred
debug(database): 498: adding offset: 0xb
debug(database): 498: adding size: 1
debug(database): 498: (type.field) is child of: 497
debug(svd): 498: creating enum: InterruptState
debug(database): 499: creating enum
debug(database): 499: adding name: InterruptState
debug(database): 499: adding size: 1
debug(database): 499: (type.enum) is child of: 379
debug(database): 500: creating enum field
debug(database): 500: adding name: has_interrupt
debug(database): 500: adding description: Has interrupt
debug(database): 500: (type.enum_field) is child of: 499
debug(database): 501: creating enum field
debug(database): 501: adding name: no_interrupt
debug(database): 501: adding description: No interrupt occurred
debug(database): 501: (type.enum_field) is child of: 499
debug(database): 502: creating field
debug(database): 502: adding name: auto_baudrate_start_bit
debug(database): 502: adding description: Receive auto baudrate detection finished using start bit occurred
debug(database): 502: adding offset: 0xa
debug(database): 502: adding size: 1
debug(database): 502: (type.field) is child of: 497
debug(svd): 502: creating enum: null
debug(database): 503: creating enum
debug(database): 503: adding size: 1
debug(database): 503: (type.enum) is child of: 379
debug(svd): 503: derived from 'InterruptState'
debug(database): 504: creating field
debug(database): 504: adding name: receive_byte_count
debug(database): 504: adding description: Receive byte count reached occurred
debug(database): 504: adding offset: 0x9
debug(database): 504: adding size: 1
debug(database): 504: (type.field) is child of: 497
debug(svd): 504: creating enum: null
debug(database): 505: creating enum
debug(database): 505: adding size: 1
debug(database): 505: (type.enum) is child of: 379
debug(svd): 505: derived from 'InterruptState'
debug(database): 506: creating field
debug(database): 506: adding name: receive_sync_error
debug(database): 506: adding description: Receive LIN mode synchronization field error occurred
debug(database): 506: adding offset: 0x8
debug(database): 506: adding size: 1
debug(database): 506: (type.field) is child of: 497
debug(svd): 506: creating enum: null
debug(database): 507: creating enum
debug(database): 507: adding size: 1
debug(database): 507: (type.enum) is child of: 379
debug(svd): 507: derived from 'InterruptState'
debug(database): 508: creating field
debug(database): 508: adding name: receive_fifo_error
debug(database): 508: adding description: Receive FIFO overflow or underflow occurred
debug(database): 508: adding offset: 0x7
debug(database): 508: adding size: 1
debug(database): 508: (type.field) is child of: 497
debug(svd): 508: creating enum: null
debug(database): 509: creating enum
debug(database): 509: adding size: 1
debug(database): 509: (type.enum) is child of: 379
debug(svd): 509: derived from 'InterruptState'
debug(database): 510: creating field
debug(database): 510: adding name: transmit_fifo_error
debug(database): 510: adding description: Transmit FIFO overflow or underflow occurred
debug(database): 510: adding offset: 0x6
debug(database): 510: adding size: 1
debug(database): 510: (type.field) is child of: 497
debug(svd): 510: creating enum: null
debug(database): 511: creating enum
debug(database): 511: adding size: 1
debug(database): 511: (type.enum) is child of: 379
debug(svd): 511: derived from 'InterruptState'
debug(database): 512: creating field
debug(database): 512: adding name: receive_parity
debug(database): 512: adding description: Receive parity check failure occurred
debug(database): 512: adding offset: 0x5
debug(database): 512: adding size: 1
debug(database): 512: (type.field) is child of: 497
debug(svd): 512: creating enum: null
debug(database): 513: creating enum
debug(database): 513: adding size: 1
debug(database): 513: (type.enum) is child of: 379
debug(svd): 513: derived from 'InterruptState'
debug(database): 514: creating field
debug(database): 514: adding name: receive_timeout
debug(database): 514: adding description: Receive timed-out interrupt occurred
debug(database): 514: adding offset: 0x4
debug(database): 514: adding size: 1
debug(database): 514: (type.field) is child of: 497
debug(svd): 514: creating enum: null
debug(database): 515: creating enum
debug(database): 515: adding size: 1
debug(database): 515: (type.enum) is child of: 379
debug(svd): 515: derived from 'InterruptState'
debug(database): 516: creating field
debug(database): 516: adding name: receive_fifo_ready
debug(database): 516: adding description: Receive FIFO ready signal raised
debug(database): 516: adding offset: 0x3
debug(database): 516: adding size: 1
debug(database): 516: (type.field) is child of: 497
debug(svd): 516: creating enum: null
debug(database): 517: creating enum
debug(database): 517: adding size: 1
debug(database): 517: (type.enum) is child of: 379
debug(svd): 517: derived from 'InterruptState'
debug(database): 518: creating field
debug(database): 518: adding name: transmit_fifo_ready
debug(database): 518: adding description: Transmit FIFO ready signal raised
debug(database): 518: adding offset: 0x2
debug(database): 518: adding size: 1
debug(database): 518: (type.field) is child of: 497
debug(svd): 518: creating enum: null
debug(database): 519: creating enum
debug(database): 519: adding size: 1
debug(database): 519: (type.enum) is child of: 379
debug(svd): 519: derived from 'InterruptState'
debug(database): 520: creating field
debug(database): 520: adding name: receive_transfer
debug(database): 520: adding description: Receive transfer finish signal raised
debug(database): 520: adding offset: 0x1
debug(database): 520: adding size: 1
debug(database): 520: (type.field) is child of: 497
debug(svd): 520: creating enum: null
debug(database): 521: creating enum
debug(database): 521: adding size: 1
debug(database): 521: (type.enum) is child of: 379
debug(svd): 521: derived from 'InterruptState'
debug(database): 522: creating field
debug(database): 522: adding name: transmit_transfer
debug(database): 522: adding description: Transmit transfer finish signal raised
debug(database): 522: adding offset: 0x0
debug(database): 522: adding size: 1
debug(database): 522: (type.field) is child of: 497
debug(svd): 522: creating enum: null
debug(database): 523: creating enum
debug(database): 523: adding size: 1
debug(database): 523: (type.enum) is child of: 379
debug(svd): 523: derived from 'InterruptState'
debug(database): 524: creating register
debug(database): 524: adding name: interrupt_mask
debug(database): 524: adding description: Interrupt mask register
debug(database): 524: adding offset: 0x24
debug(database): 524: adding size: 32
debug(database): 524: adding access: Database.Access.read_write
debug(database): 524: adding register mask: 0xffffffff
debug(database): 524: adding reset value: 4095
debug(database): 524: (type.register) is child of: 379
debug(database): 525: creating field
debug(database): 525: adding name: auto_baudrate_five_five
debug(database): 525: adding description: Receive auto baudrate detection finished using 0x55 occurred
debug(database): 525: adding offset: 0xb
debug(database): 525: adding size: 1
debug(database): 525: (type.field) is child of: 524
debug(svd): 525: creating enum: InterruptMask
debug(database): 526: creating enum
debug(database): 526: adding name: InterruptMask
debug(database): 526: adding size: 1
debug(database): 526: (type.enum) is child of: 379
debug(database): 527: creating enum field
debug(database): 527: adding name: mask
debug(database): 527: adding description: Mask interrupt
debug(database): 527: (type.enum_field) is child of: 526
debug(database): 528: creating enum field
debug(database): 528: adding name: unmask
debug(database): 528: adding description: Unmask interrupt
debug(database): 528: (type.enum_field) is child of: 526
debug(database): 529: creating field
debug(database): 529: adding name: auto_baudrate_start_bit
debug(database): 529: adding description: Receive auto baudrate detection finished using start bit interrupt mask
debug(database): 529: adding offset: 0xa
debug(database): 529: adding size: 1
debug(database): 529: (type.field) is child of: 524
debug(svd): 529: creating enum: null
debug(database): 530: creating enum
debug(database): 530: adding size: 1
debug(database): 530: (type.enum) is child of: 379
debug(svd): 530: derived from 'InterruptMask'
debug(database): 531: creating field
debug(database): 531: adding name: receive_byte_count
debug(database): 531: adding description: Receive byte count reached interrupt mask
debug(database): 531: adding offset: 0x9
debug(database): 531: adding size: 1
debug(database): 531: (type.field) is child of: 524
debug(svd): 531: creating enum: null
debug(database): 532: creating enum
debug(database): 532: adding size: 1
debug(database): 532: (type.enum) is child of: 379
debug(svd): 532: derived from 'InterruptMask'
debug(database): 533: creating field
debug(database): 533: adding name: receive_sync_error
debug(database): 533: adding description: Receive LIN mode synchronization field error interrupt mask
debug(database): 533: adding offset: 0x8
debug(database): 533: adding size: 1
debug(database): 533: (type.field) is child of: 524
debug(svd): 533: creating enum: null
debug(database): 534: creating enum
debug(database): 534: adding size: 1
debug(database): 534: (type.enum) is child of: 379
debug(svd): 534: derived from 'InterruptMask'
debug(database): 535: creating field
debug(database): 535: adding name: receive_fifo_error
debug(database): 535: adding description: Receive FIFO overflow or underflow interrupt mask
debug(database): 535: adding offset: 0x7
debug(database): 535: adding size: 1
debug(database): 535: (type.field) is child of: 524
debug(svd): 535: creating enum: null
debug(database): 536: creating enum
debug(database): 536: adding size: 1
debug(database): 536: (type.enum) is child of: 379
debug(svd): 536: derived from 'InterruptMask'
debug(database): 537: creating field
debug(database): 537: adding name: transmit_fifo_error
debug(database): 537: adding description: Transmit FIFO overflow or underflow interrupt mask
debug(database): 537: adding offset: 0x6
debug(database): 537: adding size: 1
debug(database): 537: (type.field) is child of: 524
debug(svd): 537: creating enum: null
debug(database): 538: creating enum
debug(database): 538: adding size: 1
debug(database): 538: (type.enum) is child of: 379
debug(svd): 538: derived from 'InterruptMask'
debug(database): 539: creating field
debug(database): 539: adding name: receive_parity
debug(database): 539: adding description: Receive parity check failure interrupt mask
debug(database): 539: adding offset: 0x5
debug(database): 539: adding size: 1
debug(database): 539: (type.field) is child of: 524
debug(svd): 539: creating enum: null
debug(database): 540: creating enum
debug(database): 540: adding size: 1
debug(database): 540: (type.enum) is child of: 379
debug(svd): 540: derived from 'InterruptMask'
debug(database): 541: creating field
debug(database): 541: adding name: receive_timeout
debug(database): 541: adding description: Receive timed-out interrupt mask
debug(database): 541: adding offset: 0x4
debug(database): 541: adding size: 1
debug(database): 541: (type.field) is child of: 524
debug(svd): 541: creating enum: null
debug(database): 542: creating enum
debug(database): 542: adding size: 1
debug(database): 542: (type.enum) is child of: 379
debug(svd): 542: derived from 'InterruptMask'
debug(database): 543: creating field
debug(database): 543: adding name: receive_fifo_ready
debug(database): 543: adding description: Receive FIFO ready signal interrupt mask
debug(database): 543: adding offset: 0x3
debug(database): 543: adding size: 1
debug(database): 543: (type.field) is child of: 524
debug(svd): 543: creating enum: null
debug(database): 544: creating enum
debug(database): 544: adding size: 1
debug(database): 544: (type.enum) is child of: 379
debug(svd): 544: derived from 'InterruptMask'
debug(database): 545: creating field
debug(database): 545: adding name: transmit_fifo_ready
debug(database): 545: adding description: Transmit FIFO ready signal interrupt mask
debug(database): 545: adding offset: 0x2
debug(database): 545: adding size: 1
debug(database): 545: (type.field) is child of: 524
debug(svd): 545: creating enum: null
debug(database): 546: creating enum
debug(database): 546: adding size: 1
debug(database): 546: (type.enum) is child of: 379
debug(svd): 546: derived from 'InterruptMask'
debug(database): 547: creating field
debug(database): 547: adding name: receive_transfer
debug(database): 547: adding description: Receive transfer finish signal interrupt mask
debug(database): 547: adding offset: 0x1
debug(database): 547: adding size: 1
debug(database): 547: (type.field) is child of: 524
debug(svd): 547: creating enum: null
debug(database): 548: creating enum
debug(database): 548: adding size: 1
debug(database): 548: (type.enum) is child of: 379
debug(svd): 548: derived from 'InterruptMask'
debug(database): 549: creating field
debug(database): 549: adding name: transmit_transfer
debug(database): 549: adding description: Transmit transfer finish signal interrupt mask
debug(database): 549: adding offset: 0x0
debug(database): 549: adding size: 1
debug(database): 549: (type.field) is child of: 524
debug(svd): 549: creating enum: null
debug(database): 550: creating enum
debug(database): 550: adding size: 1
debug(database): 550: (type.enum) is child of: 379
debug(svd): 550: derived from 'InterruptMask'
debug(database): 551: creating register
debug(database): 551: adding name: interrupt_clear
debug(database): 551: adding description: Clear interrupt register
debug(database): 551: adding offset: 0x28
debug(database): 551: adding size: 32
debug(database): 551: adding access: Database.Access.write_only
debug(database): 551: adding register mask: 0xffffffff
debug(database): 551: adding reset value: 0
debug(database): 551: (type.register) is child of: 379
debug(database): 552: creating field
debug(database): 552: adding name: auto_baudrate_five_five
debug(database): 552: adding description: Write 1 to clear receive auto baudrate detection finished using 0x55
debug(database): 552: adding offset: 0xb
debug(database): 552: adding size: 1
debug(database): 552: (type.field) is child of: 551
debug(svd): 552: creating enum: InterruptClear
debug(database): 553: creating enum
debug(database): 553: adding name: InterruptClear
debug(database): 553: adding size: 1
debug(database): 553: (type.enum) is child of: 379
debug(database): 554: creating enum field
debug(database): 554: adding name: clear
debug(database): 554: adding description: Write 1 to clear interrupt state
debug(database): 554: (type.enum_field) is child of: 553
debug(database): 555: creating field
debug(database): 555: adding name: auto_baudrate_start_bit
debug(database): 555: adding description: Write 1 to clear receive auto baudrate detection finished using start bit
debug(database): 555: adding offset: 0xa
debug(database): 555: adding size: 1
debug(database): 555: (type.field) is child of: 551
debug(svd): 555: creating enum: null
debug(database): 556: creating enum
debug(database): 556: adding size: 1
debug(database): 556: (type.enum) is child of: 379
debug(svd): 556: derived from 'InterruptClear'
debug(database): 557: creating field
debug(database): 557: adding name: receive_byte_count
debug(database): 557: adding description: Write 1 to clear receive byte count reached
debug(database): 557: adding offset: 0x9
debug(database): 557: adding size: 1
debug(database): 557: (type.field) is child of: 551
debug(svd): 557: creating enum: null
debug(database): 558: creating enum
debug(database): 558: adding size: 1
debug(database): 558: (type.enum) is child of: 379
debug(svd): 558: derived from 'InterruptClear'
debug(database): 559: creating field
debug(database): 559: adding name: receive_sync_error
debug(database): 559: adding description: Write 1 to clear receive LIN mode synchronization field error
debug(database): 559: adding offset: 0x8
debug(database): 559: adding size: 1
debug(database): 559: (type.field) is child of: 551
debug(svd): 559: creating enum: null
debug(database): 560: creating enum
debug(database): 560: adding size: 1
debug(database): 560: (type.enum) is child of: 379
debug(svd): 560: derived from 'InterruptClear'
debug(database): 561: creating field
debug(database): 561: adding name: receive_parity
debug(database): 561: adding description: Write 1 to clear receive parity check failure
debug(database): 561: adding offset: 0x5
debug(database): 561: adding size: 1
debug(database): 561: (type.field) is child of: 551
debug(svd): 561: creating enum: null
debug(database): 562: creating enum
debug(database): 562: adding size: 1
debug(database): 562: (type.enum) is child of: 379
debug(svd): 562: derived from 'InterruptClear'
debug(database): 563: creating field
debug(database): 563: adding name: receive_timeout
debug(database): 563: adding description: Write 1 to clear receive timed-out
debug(database): 563: adding offset: 0x4
debug(database): 563: adding size: 1
debug(database): 563: (type.field) is child of: 551
debug(svd): 563: creating enum: null
debug(database): 564: creating enum
debug(database): 564: adding size: 1
debug(database): 564: (type.enum) is child of: 379
debug(svd): 564: derived from 'InterruptClear'
debug(database): 565: creating field
debug(database): 565: adding name: receive_transfer
debug(database): 565: adding description: Write 1 to clear receive transfer finish signal
debug(database): 565: adding offset: 0x1
debug(database): 565: adding size: 1
debug(database): 565: (type.field) is child of: 551
debug(svd): 565: creating enum: null
debug(database): 566: creating enum
debug(database): 566: adding size: 1
debug(database): 566: (type.enum) is child of: 379
debug(svd): 566: derived from 'InterruptClear'
debug(database): 567: creating field
debug(database): 567: adding name: transmit_transfer
debug(database): 567: adding description: Write 1 to clear transmit transfer finish signal
debug(database): 567: adding offset: 0x0
debug(database): 567: adding size: 1
debug(database): 567: (type.field) is child of: 551
debug(svd): 567: creating enum: null
debug(database): 568: creating enum
debug(database): 568: adding size: 1
debug(database): 568: (type.enum) is child of: 379
debug(svd): 568: derived from 'InterruptClear'
debug(database): 569: creating register
debug(database): 569: adding name: interrupt_enable
debug(database): 569: adding description: Interrupt enable register
debug(database): 569: adding offset: 0x2c
debug(database): 569: adding size: 32
debug(database): 569: adding access: Database.Access.read_write
debug(database): 569: adding register mask: 0xffffffff
debug(database): 569: adding reset value: 255
debug(database): 569: (type.register) is child of: 379
debug(database): 570: creating field
debug(database): 570: adding name: auto_baudrate_five_five
debug(database): 570: adding description: Receive auto baudrate detection finished using 0x55 interrupt enable
debug(database): 570: adding offset: 0xb
debug(database): 570: adding size: 1
debug(database): 570: (type.field) is child of: 569
debug(svd): 570: creating enum: InterruptEnable
debug(database): 571: creating enum
debug(database): 571: adding name: InterruptEnable
debug(database): 571: adding size: 1
debug(database): 571: (type.enum) is child of: 379
debug(database): 572: creating enum field
debug(database): 572: adding name: enable
debug(database): 572: adding description: Enable interrupt
debug(database): 572: (type.enum_field) is child of: 571
debug(database): 573: creating enum field
debug(database): 573: adding name: disable
debug(database): 573: adding description: Disable interrupt
debug(database): 573: (type.enum_field) is child of: 571
debug(database): 574: creating field
debug(database): 574: adding name: auto_baudrate_start_bit
debug(database): 574: adding description: Receive auto baudrate detection finished using start bit interrupt enable
debug(database): 574: adding offset: 0xa
debug(database): 574: adding size: 1
debug(database): 574: (type.field) is child of: 569
debug(svd): 574: creating enum: null
debug(database): 575: creating enum
debug(database): 575: adding size: 1
debug(database): 575: (type.enum) is child of: 379
debug(svd): 575: derived from 'InterruptEnable'
debug(database): 576: creating field
debug(database): 576: adding name: receive_byte_count
debug(database): 576: adding description: Receive byte count reached interrupt enable
debug(database): 576: adding offset: 0x9
debug(database): 576: adding size: 1
debug(database): 576: (type.field) is child of: 569
debug(svd): 576: creating enum: null
debug(database): 577: creating enum
debug(database): 577: adding size: 1
debug(database): 577: (type.enum) is child of: 379
debug(svd): 577: derived from 'InterruptEnable'
debug(database): 578: creating field
debug(database): 578: adding name: receive_sync_error
debug(database): 578: adding description: Receive LIN mode synchronization field error interrupt enable
debug(database): 578: adding offset: 0x8
debug(database): 578: adding size: 1
debug(database): 578: (type.field) is child of: 569
debug(svd): 578: creating enum: null
debug(database): 579: creating enum
debug(database): 579: adding size: 1
debug(database): 579: (type.enum) is child of: 379
debug(svd): 579: derived from 'InterruptEnable'
debug(database): 580: creating field
debug(database): 580: adding name: receive_fifo_error
debug(database): 580: adding description: Receive FIFO overflow or underflow interrupt enable
debug(database): 580: adding offset: 0x7
debug(database): 580: adding size: 1
debug(database): 580: (type.field) is child of: 569
debug(svd): 580: creating enum: null
debug(database): 581: creating enum
debug(database): 581: adding size: 1
debug(database): 581: (type.enum) is child of: 379
debug(svd): 581: derived from 'InterruptEnable'
debug(database): 582: creating field
debug(database): 582: adding name: transmit_fifo_error
debug(database): 582: adding description: Transmit FIFO overflow or underflow interrupt enable
debug(database): 582: adding offset: 0x6
debug(database): 582: adding size: 1
debug(database): 582: (type.field) is child of: 569
debug(svd): 582: creating enum: null
debug(database): 583: creating enum
debug(database): 583: adding size: 1
debug(database): 583: (type.enum) is child of: 379
debug(svd): 583: derived from 'InterruptEnable'
debug(database): 584: creating field
debug(database): 584: adding name: receive_parity
debug(database): 584: adding description: Receive parity check failure interrupt enable
debug(database): 584: adding offset: 0x5
debug(database): 584: adding size: 1
debug(database): 584: (type.field) is child of: 569
debug(svd): 584: creating enum: null
debug(database): 585: creating enum
debug(database): 585: adding size: 1
debug(database): 585: (type.enum) is child of: 379
debug(svd): 585: derived from 'InterruptEnable'
debug(database): 586: creating field
debug(database): 586: adding name: receive_timeout
debug(database): 586: adding description: Receive timed-out interrupt enable
debug(database): 586: adding offset: 0x4
debug(database): 586: adding size: 1
debug(database): 586: (type.field) is child of: 569
debug(svd): 586: creating enum: null
debug(database): 587: creating enum
debug(database): 587: adding size: 1
debug(database): 587: (type.enum) is child of: 379
debug(svd): 587: derived from 'InterruptEnable'
debug(database): 588: creating field
debug(database): 588: adding name: receive_fifo_ready
debug(database): 588: adding description: Receive FIFO ready signal interrupt enable
debug(database): 588: adding offset: 0x3
debug(database): 588: adding size: 1
debug(database): 588: (type.field) is child of: 569
debug(svd): 588: creating enum: null
debug(database): 589: creating enum
debug(database): 589: adding size: 1
debug(database): 589: (type.enum) is child of: 379
debug(svd): 589: derived from 'InterruptEnable'
debug(database): 590: creating field
debug(database): 590: adding name: transmit_fifo_ready
debug(database): 590: adding description: Transmit FIFO ready signal interrupt enable
debug(database): 590: adding offset: 0x2
debug(database): 590: adding size: 1
debug(database): 590: (type.field) is child of: 569
debug(svd): 590: creating enum: null
debug(database): 591: creating enum
debug(database): 591: adding size: 1
debug(database): 591: (type.enum) is child of: 379
debug(svd): 591: derived from 'InterruptEnable'
debug(database): 592: creating field
debug(database): 592: adding name: receive_transfer
debug(database): 592: adding description: Receive transfer signal interrupt enable
debug(database): 592: adding offset: 0x1
debug(database): 592: adding size: 1
debug(database): 592: (type.field) is child of: 569
debug(svd): 592: creating enum: null
debug(database): 593: creating enum
debug(database): 593: adding size: 1
debug(database): 593: (type.enum) is child of: 379
debug(svd): 593: derived from 'InterruptEnable'
debug(database): 594: creating field
debug(database): 594: adding name: transmit_transfer
debug(database): 594: adding description: Transmit transfer signal interrupt enable
debug(database): 594: adding offset: 0x0
debug(database): 594: adding size: 1
debug(database): 594: (type.field) is child of: 569
debug(svd): 594: creating enum: null
debug(database): 595: creating enum
debug(database): 595: adding size: 1
debug(database): 595: (type.enum) is child of: 379
debug(svd): 595: derived from 'InterruptEnable'
debug(database): 596: creating register
debug(database): 596: adding name: bus_state
debug(database): 596: adding description: Bus state register
debug(database): 596: adding offset: 0x30
debug(database): 596: adding size: 32
debug(database): 596: adding access: Database.Access.read_only
debug(database): 596: adding register mask: 0xffffffff
debug(database): 596: adding reset value: 0
debug(database): 596: (type.register) is child of: 379
debug(database): 597: creating field
debug(database): 597: adding name: receive_busy
debug(database): 597: adding description: Indicates that UART receive bus is busy
debug(database): 597: adding offset: 0x1
debug(database): 597: adding size: 1
debug(database): 597: (type.field) is child of: 596
debug(svd): 597: creating enum: BusBusy
debug(database): 598: creating enum
debug(database): 598: adding name: BusBusy
debug(database): 598: adding size: 1
debug(database): 598: (type.enum) is child of: 379
debug(database): 599: creating enum field
debug(database): 599: adding name: busy
debug(database): 599: adding description: Bus is busy
debug(database): 599: (type.enum_field) is child of: 598
debug(database): 600: creating enum field
debug(database): 600: adding name: idle
debug(database): 600: adding description: Bus is not busy
debug(database): 600: (type.enum_field) is child of: 598
debug(database): 601: creating field
debug(database): 601: adding name: transmit_busy
debug(database): 601: adding description: Indicates that UART transmit bus is busy
debug(database): 601: adding offset: 0x0
debug(database): 601: adding size: 1
debug(database): 601: (type.field) is child of: 596
debug(svd): 601: creating enum: null
debug(database): 602: creating enum
debug(database): 602: adding size: 1
debug(database): 602: (type.enum) is child of: 379
debug(svd): 602: derived from 'BusBusy'
debug(database): 603: creating register
debug(database): 603: adding name: auto_baudrate
debug(database): 603: adding description: Auto baudrate detection register
debug(database): 603: adding offset: 0x34
debug(database): 603: adding size: 32
debug(database): 603: adding access: Database.Access.read_only
debug(database): 603: adding register mask: 0xffffffff
debug(database): 603: adding reset value: 0
debug(database): 603: (type.register) is child of: 379
debug(database): 604: creating field
debug(database): 604: adding name: by_five_five
debug(database): 604: adding description: Bit period of auto baudrate detection using codeword 0x55
debug(database): 604: adding offset: 0x10
debug(database): 604: adding size: 16
debug(database): 604: (type.field) is child of: 603
debug(database): 605: creating field
debug(database): 605: adding name: by_start_bit
debug(database): 605: adding description: Bit period of auto baudrate detection using start bit
debug(database): 605: adding offset: 0x0
debug(database): 605: adding size: 16
debug(database): 605: (type.field) is child of: 603
debug(database): 606: creating register
debug(database): 606: adding name: pulse_tolerance
debug(database): 606: adding description: Pulse width tolerance for auto baudrate
debug(database): 606: adding offset: 0x48
debug(database): 606: adding size: 32
debug(database): 606: adding access: Database.Access.read_write
debug(database): 606: adding register mask: 0xffffffff
debug(database): 606: adding reset value: 3
debug(database): 606: (type.register) is child of: 379
debug(database): 607: creating field
debug(database): 607: adding name: by_five_five
debug(database): 607: adding description: Pulse width tolerance of auto baudrate detection using codeword 0x55
debug(database): 607: adding offset: 0x0
debug(database): 607: adding size: 8
debug(database): 607: (type.field) is child of: 606
debug(database): 608: creating register
debug(database): 608: adding name: rs485_transmit
debug(database): 608: adding description: RS-485 mode transmit configuration
debug(database): 608: adding offset: 0x54
debug(database): 608: adding size: 32
debug(database): 608: adding access: Database.Access.read_write
debug(database): 608: adding register mask: 0xffffffff
debug(database): 608: adding reset value: 2
debug(database): 608: (type.register) is child of: 379
debug(database): 609: creating field
debug(database): 609: adding name: polarity
debug(database): 609: adding description: RS-485 pin polarity of Driver Enable (DE) pin
debug(database): 609: adding offset: 0x1
debug(database): 609: adding size: 1
debug(database): 609: (type.field) is child of: 608
debug(svd): 609: creating enum: Polarity
debug(database): 610: creating enum
debug(database): 610: adding name: Polarity
debug(database): 610: adding size: 1
debug(database): 610: (type.enum) is child of: 379
debug(database): 611: creating enum field
debug(database): 611: adding name: active_high
debug(database): 611: adding description: Driver Enable (DE) pin is active high
debug(database): 611: (type.enum_field) is child of: 610
debug(database): 612: creating enum field
debug(database): 612: adding name: active_low
debug(database): 612: adding description: Driver Enable (DE) pin is active low
debug(database): 612: (type.enum_field) is child of: 610
debug(database): 613: creating field
debug(database): 613: adding name: function
debug(database): 613: adding description: RS-485 transceiver mode enable
debug(database): 613: adding offset: 0x0
debug(database): 613: adding size: 1
debug(database): 613: (type.field) is child of: 608
debug(svd): 613: creating enum: null
debug(database): 614: creating enum
debug(database): 614: adding size: 1
debug(database): 614: (type.enum) is child of: 379
debug(database): 615: creating enum field
debug(database): 615: adding name: enable
debug(database): 615: adding description: Enable RS-485 transceiver mode\n\n
The peripheral is connected to RS-485 transceiver, and RTS signal output becomes Driver Enable (DE) signal.
debug(database): 615: (type.enum_field) is child of: 614
debug(database): 616: creating enum field
debug(database): 616: adding name: disable
debug(database): 616: adding description: Disable RS-485 transceiver mode\n\n
The peripheral operates as normal UART.
debug(database): 616: (type.enum_field) is child of: 614
debug(database): 617: creating register
debug(database): 617: adding name: fifo_config_0
debug(database): 617: adding description: FIFO configuration register 0
debug(database): 617: adding offset: 0x80
debug(database): 617: adding size: 32
debug(database): 617: adding access: Database.Access.read_write
debug(database): 617: adding register mask: 0xffffffff
debug(database): 617: adding reset value: 0
debug(database): 617: (type.register) is child of: 379
debug(database): 618: creating field
debug(database): 618: adding name: receive_underflow
debug(database): 618: adding description: Receive FIFO underflow flag\n\n
Can be cleared using `receive_clear`.
debug(database): 618: adding offset: 0x7
debug(database): 618: adding size: 1
debug(database): 618: (type.field) is child of: 617
debug(database): 618: adding access: Database.Access.read_only
debug(svd): 618: creating enum: HasUnderflow
debug(database): 619: creating enum
debug(database): 619: adding name: HasUnderflow
debug(database): 619: adding size: 1
debug(database): 619: (type.enum) is child of: 379
debug(database): 620: creating enum field
debug(database): 620: adding name: not_underflow
debug(database): 620: adding description: No FIFO buffer underflow
debug(database): 620: (type.enum_field) is child of: 619
debug(database): 621: creating enum field
debug(database): 621: adding name: underflow
debug(database): 621: adding description: Has FIFO buffer underflow
debug(database): 621: (type.enum_field) is child of: 619
debug(database): 622: creating field
debug(database): 622: adding name: receive_overflow
debug(database): 622: adding description: Receive FIFO overflow flag\n\n
Can be cleared using `receive_clear`.
debug(database): 622: adding offset: 0x6
debug(database): 622: adding size: 1
debug(database): 622: (type.field) is child of: 617
debug(database): 622: adding access: Database.Access.read_only
debug(svd): 622: creating enum: HasOverflow
debug(database): 623: creating enum
debug(database): 623: adding name: HasOverflow
debug(database): 623: adding size: 1
debug(database): 623: (type.enum) is child of: 379
debug(database): 624: creating enum field
debug(database): 624: adding name: not_overflow
debug(database): 624: adding description: No FIFO buffer overflow
debug(database): 624: (type.enum_field) is child of: 623
debug(database): 625: creating enum field
debug(database): 625: adding name: overflow
debug(database): 625: adding description: Has FIFO buffer overflow
debug(database): 625: (type.enum_field) is child of: 623
debug(database): 626: creating field
debug(database): 626: adding name: transmit_underflow
debug(database): 626: adding description: Transmit FIFO underflow flag\n\n
Can be cleared using `transmit_clear`.
debug(database): 626: adding offset: 0x5
debug(database): 626: adding size: 1
debug(database): 626: (type.field) is child of: 617
debug(database): 626: adding access: Database.Access.read_only
debug(svd): 626: creating enum: null
debug(database): 627: creating enum
debug(database): 627: adding size: 1
debug(database): 627: (type.enum) is child of: 379
debug(svd): 627: derived from 'HasUnderflow'
debug(database): 628: creating field
debug(database): 628: adding name: transmit_overflow
debug(database): 628: adding description: Transmit FIFO overflow flag\n\n
Can be cleared using `transmit_clear`.
debug(database): 628: adding offset: 0x4
debug(database): 628: adding size: 1
debug(database): 628: (type.field) is child of: 617
debug(database): 628: adding access: Database.Access.read_only
debug(svd): 628: creating enum: null
debug(database): 629: creating enum
debug(database): 629: adding size: 1
debug(database): 629: (type.enum) is child of: 379
debug(svd): 629: derived from 'HasOverflow'
debug(database): 630: creating field
debug(database): 630: adding name: receive_clear
debug(database): 630: adding description: Clears receive FIFO overflow and underflow flags
debug(database): 630: adding offset: 0x3
debug(database): 630: adding size: 1
debug(database): 630: (type.field) is child of: 617
debug(database): 630: adding access: Database.Access.write_only
debug(svd): 630: creating enum: FlagClear
debug(database): 631: creating enum
debug(database): 631: adding name: FlagClear
debug(database): 631: adding size: 1
debug(database): 631: (type.enum) is child of: 379
debug(database): 632: creating enum field
debug(database): 632: adding name: clear
debug(database): 632: adding description: Write 1 to clear fifo flags
debug(database): 632: (type.enum_field) is child of: 631
debug(database): 633: creating field
debug(database): 633: adding name: transmit_clear
debug(database): 633: adding description: Clears transmit FIFO overflow and underflow flags
debug(database): 633: adding offset: 0x2
debug(database): 633: adding size: 1
debug(database): 633: (type.field) is child of: 617
debug(database): 633: adding access: Database.Access.write_only
debug(svd): 633: creating enum: null
debug(database): 634: creating enum
debug(database): 634: adding size: 1
debug(database): 634: (type.enum) is child of: 379
debug(svd): 634: derived from 'FlagClear'
debug(database): 635: creating field
debug(database): 635: adding name: receive_dma
debug(database): 635: adding description: Enable signal of receive DMA interface
debug(database): 635: adding offset: 0x1
debug(database): 635: adding size: 1
debug(database): 635: (type.field) is child of: 617
debug(svd): 635: creating enum: DmaEnable
debug(database): 636: creating enum
debug(database): 636: adding name: DmaEnable
debug(database): 636: adding size: 1
debug(database): 636: (type.enum) is child of: 379
debug(database): 637: creating enum field
debug(database): 637: adding name: enable
debug(database): 637: adding description: Enable DMA interface
debug(database): 637: (type.enum_field) is child of: 636
debug(database): 638: creating enum field
debug(database): 638: adding name: disable
debug(database): 638: adding description: Disable DMA interface
debug(database): 638: (type.enum_field) is child of: 636
debug(database): 639: creating field
debug(database): 639: adding name: transmit_dma
debug(database): 639: adding description: Enable signal of transmit DMA interface
debug(database): 639: adding offset: 0x0
debug(database): 639: adding size: 1
debug(database): 639: (type.field) is child of: 617
debug(svd): 639: creating enum: null
debug(database): 640: creating enum
debug(database): 640: adding size: 1
debug(database): 640: (type.enum) is child of: 379
debug(svd): 640: derived from 'DmaEnable'
debug(database): 641: creating register
debug(database): 641: adding name: fifo_config_1
debug(database): 641: adding description: FIFO configuration register 1
debug(database): 641: adding offset: 0x84
debug(database): 641: adding size: 32
debug(database): 641: adding access: Database.Access.read_write
debug(database): 641: adding register mask: 0xffffffff
debug(database): 641: adding reset value: 32
debug(database): 641: (type.register) is child of: 379
debug(database): 642: creating field
debug(database): 642: adding name: receive_threshold
debug(database): 642: adding description: Receive FIFO threshold\n\n
DMA request will not be asserted if `receive_available` is less than this value
debug(database): 642: adding offset: 0x18
debug(database): 642: adding size: 5
debug(database): 642: (type.field) is child of: 641
debug(database): 643: creating field
debug(database): 643: adding name: transmit_threshold
debug(database): 643: adding description: Transmit FIFO threshold\n\n
DMA request will not be asserted if `transmit_available` is less than this value
debug(database): 643: adding offset: 0x10
debug(database): 643: adding size: 5
debug(database): 643: (type.field) is child of: 641
debug(database): 644: creating field
debug(database): 644: adding name: receive_count
debug(database): 644: adding description: Count of available data in receive FIFO
debug(database): 644: adding offset: 0x8
debug(database): 644: adding size: 6
debug(database): 644: (type.field) is child of: 641
debug(database): 644: adding access: Database.Access.read_only
debug(database): 645: creating field
debug(database): 645: adding name: transmit_count
debug(database): 645: adding description: Count of available data in transmit FIFO
debug(database): 645: adding offset: 0x0
debug(database): 645: adding size: 6
debug(database): 645: (type.field) is child of: 641
debug(database): 645: adding access: Database.Access.read_only
debug(database): 646: creating register
debug(database): 646: adding name: data_write
debug(database): 646: adding description: FIFO write data register
debug(database): 646: adding offset: 0x88
debug(database): 646: adding size: 32
debug(database): 646: adding access: Database.Access.write_only
debug(database): 646: adding register mask: 0xffffffff
debug(database): 646: adding reset value: 0
debug(database): 646: (type.register) is child of: 379
debug(database): 647: creating field
debug(database): 647: adding name: value
debug(database): 647: adding description: Write data to FIFO
debug(database): 647: adding offset: 0x0
debug(database): 647: adding size: 8
debug(database): 647: (type.field) is child of: 646
debug(database): 648: creating register
debug(database): 648: adding name: data_read
debug(database): 648: adding description: FIFO read data register
debug(database): 648: adding offset: 0x8c
debug(database): 648: adding size: 32
debug(database): 648: adding access: Database.Access.read_only
debug(database): 648: adding register mask: 0xffffffff
debug(database): 648: adding reset value: 0
debug(database): 648: (type.register) is child of: 379
debug(database): 649: creating field
debug(database): 649: adding name: value
debug(database): 649: adding description: Read data from FIFO
debug(database): 649: adding offset: 0x0
debug(database): 649: adding size: 8
debug(database): 649: (type.field) is child of: 648
debug(database): 650: creating peripheral
debug(database): 650: adding name: MISC
debug(database): 650: adding description: Chip Miscellaneous control
debug(database): 651: creating peripheral instance
debug(database): 651: adding name: MISC
debug(database): 651: adding offset: 0x20009000
debug(database): 651: (instance.peripheral) is child of: 0
debug(database): 651: adding description: Chip Miscellaneous control
debug(database): 652: creating register
debug(database): 652: adding name: todo
debug(database): 652: adding description: ??
debug(database): 652: adding offset: 0x0
debug(database): 652: adding size: 32
debug(database): 652: adding access: Database.Access.read_write
debug(database): 652: adding register mask: 0xffffffff
debug(database): 652: adding reset value: 0
debug(database): 652: (type.register) is child of: 650
debug(database): 653: creating peripheral
debug(database): 653: adding name: CCI
debug(database): 653: adding description: Camera Control Interface
debug(database): 654: creating peripheral instance
debug(database): 654: adding name: CCI
debug(database): 654: adding offset: 0x20008000
debug(database): 654: (instance.peripheral) is child of: 0
debug(database): 654: adding description: Camera Control Interface
debug(database): 655: creating register
debug(database): 655: adding name: todo
debug(database): 655: adding description: ??
debug(database): 655: adding offset: 0x0
debug(database): 655: adding size: 32
debug(database): 655: adding access: Database.Access.read_write
debug(database): 655: adding register mask: 0xffffffff
debug(database): 655: adding reset value: 0
debug(database): 655: (type.register) is child of: 653
debug(database): 656: creating peripheral
debug(database): 656: adding name: EFUSE
debug(database): 656: adding description: eFuse memory control
debug(database): 657: creating peripheral instance
debug(database): 657: adding name: EFUSE
debug(database): 657: adding offset: 0x20056000
debug(database): 657: (instance.peripheral) is child of: 0
debug(database): 657: adding description: eFuse memory control
debug(database): 658: creating register
debug(database): 658: adding name: todo
debug(database): 658: adding description: ??
debug(database): 658: adding offset: 0x0
debug(database): 658: adding size: 32
debug(database): 658: adding access: Database.Access.read_write
debug(database): 658: adding register mask: 0xffffffff
debug(database): 658: adding reset value: 0
debug(database): 658: (type.register) is child of: 656
debug(database): 659: creating peripheral
debug(database): 659: adding name: SEC
debug(database): 659: adding description: Digest, Encryption and Signing accelerator
debug(database): 660: creating peripheral instance
debug(database): 660: adding name: SEC
debug(database): 660: adding offset: 0x20004000
debug(database): 660: (instance.peripheral) is child of: 0
debug(database): 660: adding description: Digest, Encryption and Signing accelerator
debug(database): 661: creating register
debug(database): 661: adding name: todo
debug(database): 661: adding description: ??
debug(database): 661: adding offset: 0x0
debug(database): 661: adding size: 32
debug(database): 661: adding access: Database.Access.read_write
debug(database): 661: adding register mask: 0xffffffff
debug(database): 661: adding reset value: 0
debug(database): 661: (type.register) is child of: 659
debug(database): 662: creating peripheral
debug(database): 662: adding name: DEBUG
debug(database): 662: adding description: Secure debug configuration
debug(database): 663: creating peripheral instance
debug(database): 663: adding name: DEBUG
debug(database): 663: adding offset: 0x20003000
debug(database): 663: (instance.peripheral) is child of: 0
debug(database): 663: adding description: Secure debug configuration
debug(database): 664: creating register
debug(database): 664: adding name: identify
debug(database): 664: adding description: Unique module identifier
debug(database): 664: adding offset: 0x0
debug(database): 664: adding size: 32
debug(database): 664: adding count: 2
debug(database): 664: adding access: Database.Access.read_only
debug(database): 664: adding register mask: 0xffffffff
debug(database): 664: adding reset value: 0
debug(database): 664: (type.register) is child of: 662
debug(database): 665: creating field
debug(database): 665: adding name: word
debug(database): 665: adding description: Read identifier part in word
debug(database): 665: adding offset: 0x0
debug(database): 665: adding size: 32
debug(database): 665: (type.field) is child of: 664
debug(database): 666: creating register
debug(database): 666: adding name: password
debug(database): 666: adding description: Password of debug module
debug(database): 666: adding offset: 0x8
debug(database): 666: adding size: 32
debug(database): 666: adding count: 4
debug(database): 666: adding access: Database.Access.read_write
debug(database): 666: adding register mask: 0xffffffff
debug(database): 666: adding reset value: 0
debug(database): 666: (type.register) is child of: 662
debug(database): 667: creating field
debug(database): 667: adding name: word
debug(database): 667: adding description: Read or write password in word
debug(database): 667: adding offset: 0x0
debug(database): 667: adding size: 32
debug(database): 667: (type.field) is child of: 666
debug(database): 668: creating register
debug(database): 668: adding name: control
debug(database): 668: adding description: Module control register
debug(database): 668: adding offset: 0x18
debug(database): 668: adding size: 32
debug(database): 668: adding access: Database.Access.read_write
debug(database): 668: adding register mask: 0xffffffff
debug(database): 668: adding reset value: 0
debug(database): 668: (type.register) is child of: 662
debug(database): 669: creating field
debug(database): 669: adding name: password_busy
debug(database): 669: adding description: ??
debug(database): 669: adding offset: 0x0
debug(database): 669: adding size: 1
debug(database): 669: (type.field) is child of: 668
debug(database): 669: adding access: Database.Access.read_only
debug(database): 670: creating field
debug(database): 670: adding name: password_trigger
debug(database): 670: adding description: ??
debug(database): 670: adding offset: 0x1
debug(database): 670: adding size: 1
debug(database): 670: (type.field) is child of: 668
debug(database): 671: creating field
debug(database): 671: adding name: password_count
debug(database): 671: adding description: ??
debug(database): 671: adding offset: 0x4
debug(database): 671: adding size: 20
debug(database): 671: (type.field) is child of: 668
debug(database): 672: creating field
debug(database): 672: adding name: debug_mode
debug(database): 672: adding description: ??
debug(database): 672: adding offset: 0x18
debug(database): 672: adding size: 4
debug(database): 672: (type.field) is child of: 668
debug(database): 672: adding access: Database.Access.read_only
debug(database): 673: creating field
debug(database): 673: adding name: debug_enable
debug(database): 673: adding description: Read if debug module is enabled
debug(database): 673: adding offset: 0x1c
debug(database): 673: adding size: 4
debug(database): 673: (type.field) is child of: 668
debug(database): 673: adding access: Database.Access.read_only
debug(database): 674: creating peripheral
debug(database): 674: adding name: AGC
debug(database): 674: adding description: Automatic Gain Control
debug(database): 675: creating peripheral instance
debug(database): 675: adding name: AGC
debug(database): 675: adding offset: 0x20002c00
debug(database): 675: (instance.peripheral) is child of: 0
debug(database): 675: adding description: Automatic Gain Control
debug(database): 676: creating register
debug(database): 676: adding name: todo
debug(database): 676: adding description: ??
debug(database): 676: adding offset: 0x0
debug(database): 676: adding size: 32
debug(database): 676: adding access: Database.Access.read_write
debug(database): 676: adding register mask: 0xffffffff
debug(database): 676: adding reset value: 0
debug(database): 676: (type.register) is child of: 674
debug(database): 677: creating peripheral
debug(database): 677: adding name: GPIP
debug(database): 677: adding description: Generic DAC, ADC and ACOMP interface control
debug(database): 678: creating peripheral instance
debug(database): 678: adding name: GPIP
debug(database): 678: adding offset: 0x20002000
debug(database): 678: (instance.peripheral) is child of: 0
debug(database): 678: adding description: Generic DAC, ADC and ACOMP interface control
debug(database): 679: creating register
debug(database): 679: adding name: todo
debug(database): 679: adding description: ??
debug(database): 679: adding offset: 0x0
debug(database): 679: adding size: 32
debug(database): 679: adding access: Database.Access.read_write
debug(database): 679: adding register mask: 0xffffffff
debug(database): 679: adding reset value: 0
debug(database): 679: (type.register) is child of: 677
debug(database): 680: creating peripheral
debug(database): 680: adding name: GLB
debug(database): 680: adding description: Global configuration register
debug(database): 681: creating peripheral instance
debug(database): 681: adding name: GLB
debug(database): 681: adding offset: 0x20000000
debug(database): 681: (instance.peripheral) is child of: 0
debug(database): 681: adding description: Global configuration register
debug(database): 682: creating register
debug(database): 682: adding name: chip_inform
debug(database): 682: adding description: Chip information register
debug(database): 682: adding offset: 0x0
debug(database): 682: adding size: 32
debug(database): 682: adding access: Database.Access.read_write
debug(database): 682: adding register mask: 0xffffffff
debug(database): 682: adding reset value: 0
debug(database): 682: (type.register) is child of: 680
debug(database): 683: creating register
debug(database): 683: adding name: core_config_16
debug(database): 683: adding description: Core configuration register 16
debug(database): 683: adding offset: 0x50
debug(database): 683: adding size: 32
debug(database): 683: adding access: Database.Access.read_write
debug(database): 683: adding register mask: 0xffffffff
debug(database): 683: adding reset value: 0
debug(database): 683: (type.register) is child of: 680
debug(database): 684: creating register
debug(database): 684: adding name: core_config_17
debug(database): 684: adding description: Core configuration register 17
debug(database): 684: adding offset: 0x54
debug(database): 684: adding size: 32
debug(database): 684: adding access: Database.Access.read_write
debug(database): 684: adding register mask: 0xffffffff
debug(database): 684: adding reset value: 0
debug(database): 684: (type.register) is child of: 680
debug(database): 685: creating register
debug(database): 685: adding name: core_config_18
debug(database): 685: adding description: Core configuration register 18
debug(database): 685: adding offset: 0x58
debug(database): 685: adding size: 32
debug(database): 685: adding access: Database.Access.read_write
debug(database): 685: adding register mask: 0xffffffff
debug(database): 685: adding reset value: 0
debug(database): 685: (type.register) is child of: 680
debug(database): 686: creating register
debug(database): 686: adding name: core_config_19
debug(database): 686: adding description: Core configuration register 19
debug(database): 686: adding offset: 0x5c
debug(database): 686: adding size: 32
debug(database): 686: adding access: Database.Access.read_write
debug(database): 686: adding register mask: 0xffffffff
debug(database): 686: adding reset value: 0
debug(database): 686: (type.register) is child of: 680
debug(database): 687: creating register
debug(database): 687: adding name: core_config_20
debug(database): 687: adding description: Core configuration register 20
debug(database): 687: adding offset: 0x60
debug(database): 687: adding size: 32
debug(database): 687: adding access: Database.Access.read_write
debug(database): 687: adding register mask: 0xffffffff
debug(database): 687: adding reset value: 0
debug(database): 687: (type.register) is child of: 680
debug(database): 688: creating register
debug(database): 688: adding name: core_config_21
debug(database): 688: adding description: Core configuration register 21
debug(database): 688: adding offset: 0x64
debug(database): 688: adding size: 32
debug(database): 688: adding access: Database.Access.read_write
debug(database): 688: adding register mask: 0xffffffff
debug(database): 688: adding reset value: 0
debug(database): 688: (type.register) is child of: 680
debug(database): 689: creating register
debug(database): 689: adding name: core_config_22
debug(database): 689: adding description: Core configuration register 22
debug(database): 689: adding offset: 0x68
debug(database): 689: adding size: 32
debug(database): 689: adding access: Database.Access.read_write
debug(database): 689: adding register mask: 0xffffffff
debug(database): 689: adding reset value: 0
debug(database): 689: (type.register) is child of: 680
debug(database): 690: creating register
debug(database): 690: adding name: core_config_23
debug(database): 690: adding description: Core configuration register 23
debug(database): 690: adding offset: 0x6c
debug(database): 690: adding size: 32
debug(database): 690: adding access: Database.Access.read_write
debug(database): 690: adding register mask: 0xffffffff
debug(database): 690: adding reset value: 0
debug(database): 690: (type.register) is child of: 680
debug(database): 691: creating register
debug(database): 691: adding name: core_config_24
debug(database): 691: adding description: Core configuration register 24
debug(database): 691: adding offset: 0x70
debug(database): 691: adding size: 32
debug(database): 691: adding access: Database.Access.read_write
debug(database): 691: adding register mask: 0xffffffff
debug(database): 691: adding reset value: 0
debug(database): 691: (type.register) is child of: 680
debug(database): 692: creating register
debug(database): 692: adding name: core_config_25
debug(database): 692: adding description: Core configuration register 25
debug(database): 692: adding offset: 0x74
debug(database): 692: adding size: 32
debug(database): 692: adding access: Database.Access.read_write
debug(database): 692: adding register mask: 0xffffffff
debug(database): 692: adding reset value: 0
debug(database): 692: (type.register) is child of: 680
debug(database): 693: creating register
debug(database): 693: adding name: sys_config_0
debug(database): 693: adding description: System configuration register 0
debug(database): 693: adding offset: 0x90
debug(database): 693: adding size: 32
debug(database): 693: adding access: Database.Access.read_write
debug(database): 693: adding register mask: 0xffffffff
debug(database): 693: adding reset value: 0
debug(database): 693: (type.register) is child of: 680
debug(database): 694: creating register
debug(database): 694: adding name: sys_config_1
debug(database): 694: adding description: System configuration register 1
debug(database): 694: adding offset: 0x94
debug(database): 694: adding size: 32
debug(database): 694: adding access: Database.Access.read_write
debug(database): 694: adding register mask: 0xffffffff
debug(database): 694: adding reset value: 0
debug(database): 694: (type.register) is child of: 680
debug(database): 695: creating register
debug(database): 695: adding name: bus_config_0
debug(database): 695: adding description: Bus configuration register 0
debug(database): 695: adding offset: 0xa0
debug(database): 695: adding size: 32
debug(database): 695: adding access: Database.Access.read_write
debug(database): 695: adding register mask: 0xffffffff
debug(database): 695: adding reset value: 0
debug(database): 695: (type.register) is child of: 680
debug(database): 696: creating register
debug(database): 696: adding name: emi_config
debug(database): 696: adding description: Electromagnetic interference configuration
debug(database): 696: adding offset: 0xe0
debug(database): 696: adding size: 32
debug(database): 696: adding access: Database.Access.read_write
debug(database): 696: adding register mask: 0xffffffff
debug(database): 696: adding reset value: 0
debug(database): 696: (type.register) is child of: 680
debug(database): 697: creating register
debug(database): 697: adding name: rtc_config
debug(database): 697: adding description: Real-time clock configuration
debug(database): 697: adding offset: 0xf0
debug(database): 697: adding size: 32
debug(database): 697: adding access: Database.Access.read_write
debug(database): 697: adding register mask: 0xffffffff
debug(database): 697: adding reset value: 0
debug(database): 697: (type.register) is child of: 680
debug(database): 698: creating register
debug(database): 698: adding name: gpadc_config
debug(database): 698: adding description: General Purpose Analog-to-digital convert configuration
debug(database): 698: adding offset: 0x110
debug(database): 698: adding size: 32
debug(database): 698: adding access: Database.Access.read_write
debug(database): 698: adding register mask: 0xffffffff
debug(database): 698: adding reset value: 0
debug(database): 698: (type.register) is child of: 680
debug(database): 699: creating register
debug(database): 699: adding name: gpdac_config_0
debug(database): 699: adding description: General Purpose Digital-to-analog convert configuration 0
debug(database): 699: adding offset: 0x120
debug(database): 699: adding size: 32
debug(database): 699: adding access: Database.Access.read_write
debug(database): 699: adding register mask: 0xffffffff
debug(database): 699: adding reset value: 0
debug(database): 699: (type.register) is child of: 680
debug(database): 700: creating register
debug(database): 700: adding name: gpdac_config_1
debug(database): 700: adding description: General Purpose Digital-to-analog convert configuration 1
debug(database): 700: adding offset: 0x124
debug(database): 700: adding size: 32
debug(database): 700: adding access: Database.Access.read_write
debug(database): 700: adding register mask: 0xffffffff
debug(database): 700: adding reset value: 0
debug(database): 700: (type.register) is child of: 680
debug(database): 701: creating register
debug(database): 701: adding name: gpdac_config_2
debug(database): 701: adding description: General Purpose Digital-to-analog convert configuration 2
debug(database): 701: adding offset: 0x128
debug(database): 701: adding size: 32
debug(database): 701: adding access: Database.Access.read_write
debug(database): 701: adding register mask: 0xffffffff
debug(database): 701: adding reset value: 0
debug(database): 701: (type.register) is child of: 680
debug(database): 702: creating register
debug(database): 702: adding name: gpdac_config_3
debug(database): 702: adding description: General Purpose Digital-to-analog convert configuration 3
debug(database): 702: adding offset: 0x12c
debug(database): 702: adding size: 32
debug(database): 702: adding access: Database.Access.read_write
debug(database): 702: adding register mask: 0xffffffff
debug(database): 702: adding reset value: 0
debug(database): 702: (type.register) is child of: 680
debug(database): 703: creating register
debug(database): 703: adding name: dma_config_0
debug(database): 703: adding description: Direct Memory Access configuration 0
debug(database): 703: adding offset: 0x130
debug(database): 703: adding size: 32
debug(database): 703: adding access: Database.Access.read_write
debug(database): 703: adding register mask: 0xffffffff
debug(database): 703: adding reset value: 0
debug(database): 703: (type.register) is child of: 680
debug(database): 704: creating register
debug(database): 704: adding name: dma_config_1
debug(database): 704: adding description: Direct Memory Access configuration 1
debug(database): 704: adding offset: 0x134
debug(database): 704: adding size: 32
debug(database): 704: adding access: Database.Access.read_write
debug(database): 704: adding register mask: 0xffffffff
debug(database): 704: adding reset value: 0
debug(database): 704: (type.register) is child of: 680
debug(database): 705: creating register
debug(database): 705: adding name: dma_config_2
debug(database): 705: adding description: Direct Memory Access configuration 2
debug(database): 705: adding offset: 0x138
debug(database): 705: adding size: 32
debug(database): 705: adding access: Database.Access.read_write
debug(database): 705: adding register mask: 0xffffffff
debug(database): 705: adding reset value: 0
debug(database): 705: (type.register) is child of: 680
debug(database): 706: creating register
debug(database): 706: adding name: ir_config_0
debug(database): 706: adding description: Infrared configuration register 0
debug(database): 706: adding offset: 0x140
debug(database): 706: adding size: 32
debug(database): 706: adding access: Database.Access.read_write
debug(database): 706: adding register mask: 0xffffffff
debug(database): 706: adding reset value: 0
debug(database): 706: (type.register) is child of: 680
debug(database): 707: creating register
debug(database): 707: adding name: ir_config_1
debug(database): 707: adding description: Infrared configuration register 1
debug(database): 707: adding offset: 0x144
debug(database): 707: adding size: 32
debug(database): 707: adding access: Database.Access.read_write
debug(database): 707: adding register mask: 0xffffffff
debug(database): 707: adding reset value: 0
debug(database): 707: (type.register) is child of: 680
debug(database): 708: creating register
debug(database): 708: adding name: uart_config
debug(database): 708: adding description: Universal Asynchronous Receiver/Transmitter configuration
debug(database): 708: adding offset: 0x150
debug(database): 708: adding size: 32
debug(database): 708: adding access: Database.Access.read_write
debug(database): 708: adding register mask: 0xffffffff
debug(database): 708: adding reset value: 0
debug(database): 708: (type.register) is child of: 680
debug(database): 709: creating field
debug(database): 709: adding name: clock_divide
debug(database): 709: adding description: Peripheral clock divide factor
debug(database): 709: adding offset: 0x0
debug(database): 709: adding size: 3
debug(database): 709: (type.field) is child of: 708
debug(database): 710: creating field
debug(database): 710: adding name: clock_enable
debug(database): 710: adding description: Peripheral level clock gate enable
debug(database): 710: adding offset: 0x4
debug(database): 710: adding size: 1
debug(database): 710: (type.field) is child of: 708
debug(database): 711: creating field
debug(database): 711: adding name: hibernate_clock_source
debug(database): 711: adding description: Reads clock source from hibernate registers
debug(database): 711: adding offset: 0x7
debug(database): 711: adding size: 1
debug(database): 711: (type.field) is child of: 708
debug(database): 711: adding access: Database.Access.read_only
debug(database): 712: creating field
debug(database): 712: adding name: hibernate_clock_source_2
debug(database): 712: adding description: Reads clock source from hibernate registers
debug(database): 712: adding offset: 0x16
debug(database): 712: adding size: 1
debug(database): 712: (type.field) is child of: 708
debug(database): 712: adding access: Database.Access.read_only
debug(database): 713: creating field
debug(database): 713: adding name: uart2_mode
debug(database): 713: adding description: Select interface mode for UART2 peripheral
debug(database): 713: adding offset: 0x19
debug(database): 713: adding size: 7
debug(database): 713: (type.field) is child of: 708
debug(svd): 713: creating enum: Uart2Mode
debug(database): 714: creating enum
debug(database): 714: adding name: Uart2Mode
debug(database): 714: adding size: 7
debug(database): 714: (type.enum) is child of: 680
debug(database): 715: creating enum field
debug(database): 715: adding name: uart
debug(database): 715: adding description: Universal Asynchronous Receiver/Transmitter interface
debug(database): 715: (type.enum_field) is child of: 714
debug(database): 716: creating enum field
debug(database): 716: adding name: iso11898
debug(database): 716: adding description: ISO 11898 communication protocol interface
debug(database): 716: (type.enum_field) is child of: 714
debug(database): 717: creating register
debug(database): 717: adding name: uart_signal_0
debug(database): 717: adding description: Universal Asynchronous Receiver/Transmitter signal configuration 0
debug(database): 717: adding offset: 0x154
debug(database): 717: adding size: 32
debug(database): 717: adding access: Database.Access.read_write
debug(database): 717: adding register mask: 0xffffffff
debug(database): 717: adding reset value: 0
debug(database): 717: (type.register) is child of: 680
debug(database): 718: creating field
debug(database): 718: adding name: function_0[%s]
debug(database): 718: adding description: Select peripheral function for UART signal %s
debug(database): 718: adding offset: 0x0
debug(database): 718: adding size: 4
debug(database): 718: adding count: 8
debug(database): 718: (type.field) is child of: 717
debug(svd): 718: creating enum: Function
debug(database): 719: creating enum
debug(database): 719: adding name: Function
debug(database): 719: adding size: 4
debug(database): 719: (type.enum) is child of: 680
debug(database): 720: creating enum field
debug(database): 720: adding name: uart0_rts
debug(database): 720: adding description: UART0 Request-to-Send flow control
debug(database): 720: (type.enum_field) is child of: 719
debug(database): 721: creating enum field
debug(database): 721: adding name: uart0_cts
debug(database): 721: adding description: UART0 Clear-to-Send flow control
debug(database): 721: (type.enum_field) is child of: 719
debug(database): 722: creating enum field
debug(database): 722: adding name: uart0_txd
debug(database): 722: adding description: UART0 transmit data
debug(database): 722: (type.enum_field) is child of: 719
debug(database): 723: creating enum field
debug(database): 723: adding name: uart0_rxd
debug(database): 723: adding description: UART0 receive data
debug(database): 723: (type.enum_field) is child of: 719
debug(database): 724: creating enum field
debug(database): 724: adding name: uart1_rts
debug(database): 724: adding description: UART1 Request-to-Send flow control
debug(database): 724: (type.enum_field) is child of: 719
debug(database): 725: creating enum field
debug(database): 725: adding name: uart1_cts
debug(database): 725: adding description: UART1 Clear-to-Send flow control
debug(database): 725: (type.enum_field) is child of: 719
debug(database): 726: creating enum field
debug(database): 726: adding name: uart1_txd
debug(database): 726: adding description: UART1 transmit data
debug(database): 726: (type.enum_field) is child of: 719
debug(database): 727: creating enum field
debug(database): 727: adding name: uart1_rxd
debug(database): 727: adding description: UART1 receive data
debug(database): 727: (type.enum_field) is child of: 719
debug(database): 728: creating enum field
debug(database): 728: adding name: uart2_rts
debug(database): 728: adding description: UART2 Request-to-Send flow control
debug(database): 728: (type.enum_field) is child of: 719
debug(database): 729: creating enum field
debug(database): 729: adding name: uart2_cts
debug(database): 729: adding description: UART2 Clear-to-Send flow control
debug(database): 729: (type.enum_field) is child of: 719
debug(database): 730: creating enum field
debug(database): 730: adding name: uart2_txd
debug(database): 730: adding description: UART2 transmit data
debug(database): 730: (type.enum_field) is child of: 719
debug(database): 731: creating enum field
debug(database): 731: adding name: uart2_rxd
debug(database): 731: adding description: UART2 receive data
debug(database): 731: (type.enum_field) is child of: 719
debug(database): 732: creating register
debug(database): 732: adding name: uart_signal_1
debug(database): 732: adding description: Universal Asynchronous Receiver/Transmitter signal configuration 1
debug(database): 732: adding offset: 0x158
debug(database): 732: adding size: 32
debug(database): 732: adding access: Database.Access.read_write
debug(database): 732: adding register mask: 0xffffffff
debug(database): 732: adding reset value: 0
debug(database): 732: (type.register) is child of: 680
debug(database): 733: creating field
debug(database): 733: adding name: function_1[%s]
debug(database): 733: adding description: Select peripheral function for UART signal %s (offset by 8)
debug(database): 733: adding offset: 0x0
debug(database): 733: adding size: 4
debug(database): 733: adding count: 4
debug(database): 733: (type.field) is child of: 732
debug(svd): 733: creating enum: null
debug(database): 734: creating enum
debug(database): 734: adding size: 4
debug(database): 734: (type.enum) is child of: 680
debug(svd): 734: derived from 'uart_signal_0.function_0[%s].Function'
debug(database): 735: creating register
debug(database): 735: adding name: flash_config
debug(database): 735: adding description: Serial flash configuration
debug(database): 735: adding offset: 0x170
debug(database): 735: adding size: 32
debug(database): 735: adding access: Database.Access.read_write
debug(database): 735: adding register mask: 0xffffffff
debug(database): 735: adding reset value: 0
debug(database): 735: (type.register) is child of: 680
debug(database): 736: creating register
debug(database): 736: adding name: i2c_config
debug(database): 736: adding description: Inter-Integrated Circuit bus configuration
debug(database): 736: adding offset: 0x180
debug(database): 736: adding size: 32
debug(database): 736: adding access: Database.Access.read_write
debug(database): 736: adding register mask: 0xffffffff
debug(database): 736: adding reset value: 0
debug(database): 736: (type.register) is child of: 680
debug(database): 737: creating register
debug(database): 737: adding name: i2s_config
debug(database): 737: adding description: Inter-IC Sound configuration
debug(database): 737: adding offset: 0x190
debug(database): 737: adding size: 32
debug(database): 737: adding access: Database.Access.read_write
debug(database): 737: adding register mask: 0xffffffff
debug(database): 737: adding reset value: 0
debug(database): 737: (type.register) is child of: 680
debug(database): 738: creating register
debug(database): 738: adding name: spi_config
debug(database): 738: adding description: Serial Peripheral Interface configuration
debug(database): 738: adding offset: 0x1b0
debug(database): 738: adding size: 32
debug(database): 738: adding access: Database.Access.read_write
debug(database): 738: adding register mask: 0xffffffff
debug(database): 738: adding reset value: 0
debug(database): 738: (type.register) is child of: 680
debug(database): 739: creating register
debug(database): 739: adding name: quad_config
debug(database): 739: adding description: Quadrature decoder configuration
debug(database): 739: adding offset: 0x1c0
debug(database): 739: adding size: 32
debug(database): 739: adding access: Database.Access.read_write
debug(database): 739: adding register mask: 0xffffffff
debug(database): 739: adding reset value: 0
debug(database): 739: (type.register) is child of: 680
debug(database): 740: creating register
debug(database): 740: adding name: digit_clock_0
debug(database): 740: adding description: Digital clock configuration 0
debug(database): 740: adding offset: 0x250
debug(database): 740: adding size: 32
debug(database): 740: adding access: Database.Access.read_write
debug(database): 740: adding register mask: 0xffffffff
debug(database): 740: adding reset value: 0
debug(database): 740: (type.register) is child of: 680
debug(database): 741: creating register
debug(database): 741: adding name: digit_clock_1
debug(database): 741: adding description: Digital clock configuration 1
debug(database): 741: adding offset: 0x254
debug(database): 741: adding size: 32
debug(database): 741: adding access: Database.Access.read_write
debug(database): 741: adding register mask: 0xffffffff
debug(database): 741: adding reset value: 0
debug(database): 741: (type.register) is child of: 680
debug(database): 742: creating register
debug(database): 742: adding name: digit_clock_2
debug(database): 742: adding description: Digital clock configuration 2
debug(database): 742: adding offset: 0x258
debug(database): 742: adding size: 32
debug(database): 742: adding access: Database.Access.read_write
debug(database): 742: adding register mask: 0xffffffff
debug(database): 742: adding reset value: 0
debug(database): 742: (type.register) is child of: 680
debug(database): 743: creating register
debug(database): 743: adding name: radio_config
debug(database): 743: adding description: Radio configuration register
debug(database): 743: adding offset: 0x260
debug(database): 743: adding size: 32
debug(database): 743: adding access: Database.Access.read_write
debug(database): 743: adding register mask: 0xffffffff
debug(database): 743: adding reset value: 0
debug(database): 743: (type.register) is child of: 680
debug(database): 744: creating register
debug(database): 744: adding name: debug_config_0
debug(database): 744: adding description: Debug configuration register 0
debug(database): 744: adding offset: 0x2e0
debug(database): 744: adding size: 32
debug(database): 744: adding access: Database.Access.read_write
debug(database): 744: adding register mask: 0xffffffff
debug(database): 744: adding reset value: 0
debug(database): 744: (type.register) is child of: 680
debug(database): 745: creating register
debug(database): 745: adding name: debug_config_1
debug(database): 745: adding description: Debug configuration register 1
debug(database): 745: adding offset: 0x2e4
debug(database): 745: adding size: 32
debug(database): 745: adding access: Database.Access.read_write
debug(database): 745: adding register mask: 0xffffffff
debug(database): 745: adding reset value: 0
debug(database): 745: (type.register) is child of: 680
debug(database): 746: creating register
debug(database): 746: adding name: debug_config_2
debug(database): 746: adding description: Debug configuration register 2
debug(database): 746: adding offset: 0x2e8
debug(database): 746: adding size: 32
debug(database): 746: adding access: Database.Access.read_write
debug(database): 746: adding register mask: 0xffffffff
debug(database): 746: adding reset value: 0
debug(database): 746: (type.register) is child of: 680
debug(database): 747: creating register
debug(database): 747: adding name: debug_config_3
debug(database): 747: adding description: Debug configuration register 3
debug(database): 747: adding offset: 0x2ec
debug(database): 747: adding size: 32
debug(database): 747: adding access: Database.Access.read_write
debug(database): 747: adding register mask: 0xffffffff
debug(database): 747: adding reset value: 0
debug(database): 747: (type.register) is child of: 680
debug(database): 748: creating register
debug(database): 748: adding name: debug_config_4
debug(database): 748: adding description: Debug configuration register 4
debug(database): 748: adding offset: 0x2f0
debug(database): 748: adding size: 32
debug(database): 748: adding access: Database.Access.read_write
debug(database): 748: adding register mask: 0xffffffff
debug(database): 748: adding reset value: 0
debug(database): 748: (type.register) is child of: 680
debug(database): 749: creating register
debug(database): 749: adding name: test_mode
debug(database): 749: adding description: Memory Built-in Self Test mode
debug(database): 749: adding offset: 0x300
debug(database): 749: adding size: 32
debug(database): 749: adding access: Database.Access.read_write
debug(database): 749: adding register mask: 0xffffffff
debug(database): 749: adding reset value: 0
debug(database): 749: (type.register) is child of: 680
debug(database): 750: creating register
debug(database): 750: adding name: test_done
debug(database): 750: adding description: Memory Built-in Self Test done state
debug(database): 750: adding offset: 0x308
debug(database): 750: adding size: 32
debug(database): 750: adding access: Database.Access.read_write
debug(database): 750: adding register mask: 0xffffffff
debug(database): 750: adding reset value: 0
debug(database): 750: (type.register) is child of: 680
debug(database): 751: creating register
debug(database): 751: adding name: test_fail
debug(database): 751: adding description: Memory Built-in Self Test fail state
debug(database): 751: adding offset: 0x310
debug(database): 751: adding size: 32
debug(database): 751: adding access: Database.Access.read_write
debug(database): 751: adding register mask: 0xffffffff
debug(database): 751: adding reset value: 0
debug(database): 751: (type.register) is child of: 680
debug(database): 752: creating register
debug(database): 752: adding name: audio_config_0
debug(database): 752: adding description: Audio configuration register 0
debug(database): 752: adding offset: 0x340
debug(database): 752: adding size: 32
debug(database): 752: adding access: Database.Access.read_write
debug(database): 752: adding register mask: 0xffffffff
debug(database): 752: adding reset value: 0
debug(database): 752: (type.register) is child of: 680
debug(database): 753: creating register
debug(database): 753: adding name: audio_config_1
debug(database): 753: adding description: Audio configuration register 1
debug(database): 753: adding offset: 0x344
debug(database): 753: adding size: 32
debug(database): 753: adding access: Database.Access.read_write
debug(database): 753: adding register mask: 0xffffffff
debug(database): 753: adding reset value: 0
debug(database): 753: (type.register) is child of: 680
debug(database): 754: creating register
debug(database): 754: adding name: emac_config
debug(database): 754: adding description: Ethernet Media Access Control register
debug(database): 754: adding offset: 0x390
debug(database): 754: adding size: 32
debug(database): 754: adding access: Database.Access.read_write
debug(database): 754: adding register mask: 0xffffffff
debug(database): 754: adding reset value: 0
debug(database): 754: (type.register) is child of: 680
debug(database): 755: creating register
debug(database): 755: adding name: cam_config
debug(database): 755: adding description: ??
debug(database): 755: adding offset: 0x420
debug(database): 755: adding size: 32
debug(database): 755: adding access: Database.Access.read_write
debug(database): 755: adding register mask: 0xffffffff
debug(database): 755: adding reset value: 0
debug(database): 755: (type.register) is child of: 680
debug(database): 756: creating register
debug(database): 756: adding name: gpio_config
debug(database): 756: adding description: Generic Purpose Input/Output config
debug(database): 756: adding offset: 0x8c4
debug(database): 756: adding size: 32
debug(database): 756: adding count: 46
debug(database): 756: adding access: Database.Access.read_write
debug(database): 756: adding register mask: 0xffffffff
debug(database): 756: adding reset value: 0
debug(database): 756: (type.register) is child of: 680
debug(database): 757: creating field
debug(database): 757: adding name: pin_mode
debug(database): 757: adding description: Pin input/output mode switch
debug(database): 757: adding offset: 0x1e
debug(database): 757: adding size: 2
debug(database): 757: (type.field) is child of: 756
debug(svd): 757: creating enum: PinMode
debug(database): 758: creating enum
debug(database): 758: adding name: PinMode
debug(database): 758: adding size: 2
debug(database): 758: (type.enum) is child of: 680
debug(database): 759: creating enum field
debug(database): 759: adding name: input
debug(database): 759: adding description: Digital input mode
debug(database): 759: (type.enum_field) is child of: 758
debug(database): 760: creating enum field
debug(database): 760: adding name: output
debug(database): 760: adding description: Digital output mode
debug(database): 760: (type.enum_field) is child of: 758
debug(database): 761: creating enum field
debug(database): 761: adding name: alternate
debug(database): 761: adding description: Alternate function mode
debug(database): 761: (type.enum_field) is child of: 758
debug(database): 762: creating enum field
debug(database): 762: adding name: analog
debug(database): 762: adding description: Analog mode
debug(database): 762: (type.enum_field) is child of: 758
debug(database): 763: creating field
debug(database): 763: adding name: input_value
debug(database): 763: adding description: Input value
debug(database): 763: adding offset: 0x1c
debug(database): 763: adding size: 1
debug(database): 763: (type.field) is child of: 756
debug(database): 764: creating field
debug(database): 764: adding name: output_clear
debug(database): 764: adding description: Clear output value to 0
debug(database): 764: adding offset: 0x1a
debug(database): 764: adding size: 1
debug(database): 764: (type.field) is child of: 756
debug(database): 765: creating field
debug(database): 765: adding name: output_set
debug(database): 765: adding description: Set output value to 1
debug(database): 765: adding offset: 0x19
debug(database): 765: adding size: 1
debug(database): 765: (type.field) is child of: 756
debug(database): 766: creating field
debug(database): 766: adding name: output_value
debug(database): 766: adding description: Output value
debug(database): 766: adding offset: 0x18
debug(database): 766: adding size: 1
debug(database): 766: (type.field) is child of: 756
debug(database): 767: creating field
debug(database): 767: adding name: interrupt_mask
debug(database): 767: adding description: Pin interrupt mask
debug(database): 767: adding offset: 0x16
debug(database): 767: adding size: 1
debug(database): 767: (type.field) is child of: 756
debug(database): 768: creating field
debug(database): 768: adding name: interrupt_state
debug(database): 768: adding description: Pin interrupt state
debug(database): 768: adding offset: 0x15
debug(database): 768: adding size: 1
debug(database): 768: (type.field) is child of: 756
debug(database): 769: creating field
debug(database): 769: adding name: interrupt_clear
debug(database): 769: adding description: Clear pin interrupt flag
debug(database): 769: adding offset: 0x14
debug(database): 769: adding size: 1
debug(database): 769: (type.field) is child of: 756
debug(database): 770: creating field
debug(database): 770: adding name: interrupt_mode
debug(database): 770: adding description: Select pin interrupt mode
debug(database): 770: adding offset: 0x10
debug(database): 770: adding size: 4
debug(database): 770: (type.field) is child of: 756
debug(database): 771: creating field
debug(database): 771: adding name: alternate
debug(database): 771: adding description: Pin alternate function switch
debug(database): 771: adding offset: 0x8
debug(database): 771: adding size: 5
debug(database): 771: (type.field) is child of: 756
debug(svd): 771: creating enum: Alternate
debug(database): 772: creating enum
debug(database): 772: adding name: Alternate
debug(database): 772: adding size: 5
debug(database): 772: (type.enum) is child of: 680
debug(database): 773: creating enum field
debug(database): 773: adding name: sdh
debug(database): 773: adding description: Secure Digital host
debug(database): 773: (type.enum_field) is child of: 772
debug(database): 774: creating enum field
debug(database): 774: adding name: spi0
debug(database): 774: adding description: Serial Peripheral Interface 0
debug(database): 774: (type.enum_field) is child of: 772
debug(database): 775: creating enum field
debug(database): 775: adding name: flash
debug(database): 775: adding description: Flash control
debug(database): 775: (type.enum_field) is child of: 772
debug(database): 776: creating enum field
debug(database): 776: adding name: i2s
debug(database): 776: adding description: Inter-IC Sound
debug(database): 776: (type.enum_field) is child of: 772
debug(database): 777: creating enum field
debug(database): 777: adding name: pdm
debug(database): 777: adding description: Pulse Density Modulation
debug(database): 777: (type.enum_field) is child of: 772
debug(database): 778: creating enum field
debug(database): 778: adding name: i2c0
debug(database): 778: adding description: Inter-Integrated Circuit bus 0
debug(database): 778: (type.enum_field) is child of: 772
debug(database): 779: creating enum field
debug(database): 779: adding name: i2c1
debug(database): 779: adding description: Inter-Integrated Circuit bus 1
debug(database): 779: (type.enum_field) is child of: 772
debug(database): 780: creating enum field
debug(database): 780: adding name: uart
debug(database): 780: adding description: Universal Asynchronous Receiver/Transmitter
debug(database): 780: (type.enum_field) is child of: 772
debug(database): 781: creating enum field
debug(database): 781: adding name: emac
debug(database): 781: adding description: Ethernet Media Access Control
debug(database): 781: (type.enum_field) is child of: 772
debug(database): 782: creating enum field
debug(database): 782: adding name: cam
debug(database): 782: adding description: ??
debug(database): 782: (type.enum_field) is child of: 772
debug(database): 783: creating enum field
debug(database): 783: adding name: analog
debug(database): 783: adding description: ??
debug(database): 783: (type.enum_field) is child of: 772
debug(database): 784: creating enum field
debug(database): 784: adding name: gpio
debug(database): 784: adding description: Generic Purpose Input/Output
debug(database): 784: (type.enum_field) is child of: 772
debug(database): 785: creating enum field
debug(database): 785: adding name: pwm0
debug(database): 785: adding description: Pulse-Width Modulation module 0
debug(database): 785: (type.enum_field) is child of: 772
debug(database): 786: creating enum field
debug(database): 786: adding name: pwm1
debug(database): 786: adding description: Pulse-Width Modulation module 1
debug(database): 786: (type.enum_field) is child of: 772
debug(database): 787: creating enum field
debug(database): 787: adding name: spi1
debug(database): 787: adding description: Serial Peripheral Interface 1
debug(database): 787: (type.enum_field) is child of: 772
debug(database): 788: creating enum field
debug(database): 788: adding name: i2c2
debug(database): 788: adding description: Inter-Integrated Circuit bus 2
debug(database): 788: (type.enum_field) is child of: 772
debug(database): 789: creating enum field
debug(database): 789: adding name: i2c3
debug(database): 789: adding description: Inter-Integrated Circuit bus 3
debug(database): 789: (type.enum_field) is child of: 772
debug(database): 790: creating enum field
debug(database): 790: adding name: mm_uart
debug(database): 790: adding description: Multimedia subsystem Universal Asynchronous Receiver/Transmitter
debug(database): 790: (type.enum_field) is child of: 772
debug(database): 791: creating enum field
debug(database): 791: adding name: dbi_b
debug(database): 791: adding description: ??
debug(database): 791: (type.enum_field) is child of: 772
debug(database): 792: creating enum field
debug(database): 792: adding name: dbi_c
debug(database): 792: adding description: ??
debug(database): 792: (type.enum_field) is child of: 772
debug(database): 793: creating enum field
debug(database): 793: adding name: dpi
debug(database): 793: adding description: ??
debug(database): 793: (type.enum_field) is child of: 772
debug(database): 794: creating enum field
debug(database): 794: adding name: jtag_lp
debug(database): 794: adding description: Low power core JTAG interface
debug(database): 794: (type.enum_field) is child of: 772
debug(database): 795: creating enum field
debug(database): 795: adding name: jtag_m0
debug(database): 795: adding description: M0 core JTAG interface
debug(database): 795: (type.enum_field) is child of: 772
debug(database): 796: creating enum field
debug(database): 796: adding name: jtag_d0
debug(database): 796: adding description: D0 core JTAG interface
debug(database): 796: (type.enum_field) is child of: 772
debug(database): 797: creating enum field
debug(database): 797: adding name: clock_out
debug(database): 797: adding description: Clock output
debug(database): 797: (type.enum_field) is child of: 772
debug(database): 798: creating field
debug(database): 798: adding name: output_function
debug(database): 798: adding description: Enable output signal
debug(database): 798: adding offset: 0x6
debug(database): 798: adding size: 1
debug(database): 798: (type.field) is child of: 756
debug(database): 799: creating field
debug(database): 799: adding name: pull_down
debug(database): 799: adding description: Enable internal pull-down
debug(database): 799: adding offset: 0x5
debug(database): 799: adding size: 1
debug(database): 799: (type.field) is child of: 756
debug(database): 800: creating field
debug(database): 800: adding name: pull_up
debug(database): 800: adding description: Enable internal pull-up
debug(database): 800: adding offset: 0x4
debug(database): 800: adding size: 1
debug(database): 800: (type.field) is child of: 756
debug(database): 801: creating field
debug(database): 801: adding name: drive
debug(database): 801: adding description: Drive strength
debug(database): 801: adding offset: 0x2
debug(database): 801: adding size: 2
debug(database): 801: (type.field) is child of: 756
debug(database): 802: creating field
debug(database): 802: adding name: schmitt
debug(database): 802: adding description: Enable schmitt trigger
debug(database): 802: adding offset: 0x1
debug(database): 802: adding size: 1
debug(database): 802: (type.field) is child of: 756
debug(database): 803: creating field
debug(database): 803: adding name: input_function
debug(database): 803: adding description: Enable input signal
debug(database): 803: adding offset: 0x0
debug(database): 803: adding size: 1
debug(database): 803: (type.field) is child of: 756
debug(database): 804: creating register
debug(database): 804: adding name: gpio_input
debug(database): 804: adding description: Read value from Generic Purpose Input/Output pins
debug(database): 804: adding offset: 0xac4
debug(database): 804: adding size: 32
debug(database): 804: adding count: 2
debug(database): 804: adding access: Database.Access.read_write
debug(database): 804: adding register mask: 0xffffffff
debug(database): 804: adding reset value: 0
debug(database): 804: (type.register) is child of: 680
debug(database): 805: creating register
debug(database): 805: adding name: gpio_output
debug(database): 805: adding description: Write value to Generic Purpose Input/Output pins
debug(database): 805: adding offset: 0xae4
debug(database): 805: adding size: 32
debug(database): 805: adding count: 2
debug(database): 805: adding access: Database.Access.read_write
debug(database): 805: adding register mask: 0xffffffff
debug(database): 805: adding reset value: 0
debug(database): 805: (type.register) is child of: 680
debug(database): 806: creating register
debug(database): 806: adding name: gpio_set
debug(database): 806: adding description: Set pin output value to high
debug(database): 806: adding offset: 0xaec
debug(database): 806: adding size: 32
debug(database): 806: adding count: 2
debug(database): 806: adding access: Database.Access.read_write
debug(database): 806: adding register mask: 0xffffffff
debug(database): 806: adding reset value: 0
debug(database): 806: (type.register) is child of: 680
debug(database): 807: creating register
debug(database): 807: adding name: gpio_clear
debug(database): 807: adding description: Set pin output value to low
debug(database): 807: adding offset: 0xaf4
debug(database): 807: adding size: 32
debug(database): 807: adding count: 2
debug(database): 807: adding access: Database.Access.read_write
debug(database): 807: adding register mask: 0xffffffff
debug(database): 807: adding reset value: 0
debug(database): 807: (type.register) is child of: 680
debug(svd): 44: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 46: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 48: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 50: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 52: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 54: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 61: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 63: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 65: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 67: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 69: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 71: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 158: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 165: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 189: derived from HasUnderflow
warning(svd): derived: HasUnderflow is field: 181
debug(svd): 191: derived from HasOverflow
warning(svd): derived: HasOverflow is field: 185
debug(svd): 196: derived from FlagClear
warning(svd): derived: FlagClear is field: 193
debug(svd): 202: derived from DmaEnable
warning(svd): derived: DmaEnable is field: 198
debug(svd): 273: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 275: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 277: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 279: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 281: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 286: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 288: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 294: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 296: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 298: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 300: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 302: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 308: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 310: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 312: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 314: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 316: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 343: derived from HasUnderflow
warning(svd): derived: HasUnderflow is field: 181
debug(svd): 345: derived from HasOverflow
warning(svd): derived: HasOverflow is field: 185
debug(svd): 350: derived from FlagClear
warning(svd): derived: FlagClear is field: 193
debug(svd): 356: derived from DmaEnable
warning(svd): derived: DmaEnable is field: 198
debug(svd): 494: derived from rts_value.SignalAssert
warning(svd): failed to derive entity 494 from rts_value.SignalAssert: error.NameNotFound
debug(svd): 496: derived from rts_signal.OverrideEnable
warning(svd): failed to derive entity 496 from rts_signal.OverrideEnable: error.NameNotFound
debug(svd): 503: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 505: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 507: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 509: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 511: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 513: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 515: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 517: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 519: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 521: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 523: derived from InterruptState
warning(svd): derived: InterruptState is field: 40
debug(svd): 530: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 532: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 534: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 536: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 538: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 540: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 542: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 544: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 546: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 548: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 550: derived from InterruptMask
warning(svd): derived: InterruptMask is field: 57
debug(svd): 556: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 558: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 560: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 562: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 564: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 566: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 568: derived from InterruptClear
warning(svd): derived: InterruptClear is field: 283
debug(svd): 575: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 577: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 579: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 581: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 583: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 585: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 587: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 589: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 591: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 593: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 595: derived from InterruptEnable
warning(svd): derived: InterruptEnable is field: 154
debug(svd): 602: derived from BusBusy
warning(svd): derived: BusBusy is field: 598
debug(svd): 627: derived from HasUnderflow
warning(svd): derived: HasUnderflow is field: 181
debug(svd): 629: derived from HasOverflow
warning(svd): derived: HasOverflow is field: 185
debug(svd): 634: derived from FlagClear
warning(svd): derived: FlagClear is field: 193
debug(svd): 640: derived from DmaEnable
warning(svd): derived: DmaEnable is field: 198
debug(svd): 734: derived from uart_signal_0.function_0[%s].Function
warning(svd): failed to derive entity 734 from uart_signal_0.function_0[%s].Function: error.NameNotFound
debug(gen): no registers found
warning(gen): failed to generate peripheral 'UART[%s]': error.MissingEnumFields
warning(gen): TODO: field array with enums
warning(gen): TODO: field array with enums
thread 1636 panic: reached unreachable code
C:\Users\John\scoop\apps\zig\current\lib\std\debug.zig:343:14: 0x7ff7fea9832d in assert (regz.exe.obj)
    if (!ok) unreachable; // assertion failure
             ^
C:\Users\John\scoop\apps\zig\current\lib\std\zig\render.zig:18:11: 0x7ff7feba3477 in renderTree (regz.exe.obj)
    assert(tree.errors.len == 0); // Cannot render an invalid tree.
          ^
C:\Users\John\scoop\apps\zig\current\lib\std\zig\Ast.zig:119:46: 0x7ff7feb63c01 in renderToArrayList (regz.exe.obj)
    return @import("./render.zig").renderTree(buffer, tree);
                                             ^
C:\Users\John\scoop\apps\zig\current\lib\std\zig\Ast.zig:114:31: 0x7ff7feae800e in render (regz.exe.obj)
    try tree.renderToArrayList(&buffer);
                              ^
C:\code\zig\embedded\bl-chips\bl808-zig\deps\regz\src\gen.zig:49:32: 0x7ff7feae7349 in to_zig__anon_15075 (regz.exe.obj)
    const text = try ast.render(db.gpa);
                               ^
C:\code\zig\embedded\bl-chips\bl808-zig\deps\regz\src\Database.zig:904:19: 0x7ff7feae8472 in to_zig__anon_15020 (regz.exe.obj)
    try gen.to_zig(db, out_writer);
                  ^
C:\code\zig\embedded\bl-chips\bl808-zig\deps\regz\src\main.zig:145:22: 0x7ff7fea92661 in main_impl (regz.exe.obj)
        try db.to_zig(buffered.writer());
                     ^
C:\code\zig\embedded\bl-chips\bl808-zig\deps\regz\src\main.zig:23:14: 0x7ff7fea91012 in main (regz.exe.obj)
    main_impl() catch |err| switch (err) {
             ^
C:\Users\John\scoop\apps\zig\current\lib\std\start.zig:473:101: 0x7ff7fea92b8c in main (regz.exe.obj)
    return @call(.always_inline, callMainWithArgs, .{ @as(usize, @intCast(c_argc)), @as([*][*:0]u8, @ptrCast(c_argv)), envp });
                                                                                                    ^
C:\Users\John\scoop\apps\zig\current\lib\libc\mingw\crt\crtexe.c:321:0: 0x7ff7fec7de64 in __tmainCRTStartup (crt2.obj)
    mainret = main (argc, argv, envp);

C:\Users\John\scoop\apps\zig\current\lib\libc\mingw\crt\crtexe.c:202:0: 0x7ff7fec7debb in mainCRTStartup (crt2.obj)
  ret = __tmainCRTStartup ();

???:?:?: 0x7ffbdbc57613 in ??? (KERNEL32.DLL)
???:?:?: 0x7ffbdbf426b0 in ??? (ntdll.dll)
